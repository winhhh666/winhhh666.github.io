<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java文字小游戏</title>
      <link href="/2023/08/25/java-wen-zi-xiao-you-xi/"/>
      <url>/2023/08/25/java-wen-zi-xiao-you-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cugbwfx<span class="token punctuation">.</span>test2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Role</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Role</span> r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"嘿嘿"</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r2<span class="token punctuation">.</span><span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            r1<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ko了"</span> <span class="token operator">+</span> r2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            r2<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ko了"</span> <span class="token operator">+</span> r1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> blood<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> face<span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> attacks_desc<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。"</span><span class="token punctuation">,</span>            <span class="token string">"%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。"</span><span class="token punctuation">,</span>            <span class="token string">"%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> injureds_desc<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"结果%s退了半步，毫发无损"</span><span class="token punctuation">,</span>            <span class="token string">"结果给%s造成一处瘀伤"</span><span class="token punctuation">,</span>            <span class="token string">"结果一击命中，%s痛得弯下腰"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s痛苦地闷哼了一声，显然受了点内伤"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s摇摇晃晃，一跤摔倒在地"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s脸色一下变得惨白，连退了好几步"</span><span class="token punctuation">,</span>            <span class="token string">"结果『轰』的一声，%s口中鲜血狂喷而出"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s一声惨叫，像滩软泥般塌了下去"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> boyfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"风流俊雅"</span><span class="token punctuation">,</span> <span class="token string">"气宇轩昂"</span><span class="token punctuation">,</span> <span class="token string">"相貌英俊"</span><span class="token punctuation">,</span> <span class="token string">"五官端正"</span><span class="token punctuation">,</span> <span class="token string">"相貌平平"</span><span class="token punctuation">,</span> <span class="token string">"一塌糊涂"</span><span class="token punctuation">,</span> <span class="token string">"面目狰狞"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> girlfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"美奂绝伦"</span><span class="token punctuation">,</span> <span class="token string">"沉鱼落雁"</span><span class="token punctuation">,</span> <span class="token string">"婷婷玉立"</span><span class="token punctuation">,</span> <span class="token string">"身材娇好"</span><span class="token punctuation">,</span> <span class="token string">"相貌平平"</span><span class="token punctuation">,</span> <span class="token string">"相貌简陋"</span><span class="token punctuation">,</span> <span class="token string">"惨不忍睹"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> blood<span class="token punctuation">,</span> <span class="token keyword">char</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>        <span class="token function">setFace</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFace</span><span class="token punctuation">(</span><span class="token keyword">char</span> gender<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>gender <span class="token operator">==</span><span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>boyfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> boyfaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>gender <span class="token operator">==</span> <span class="token char">'女'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>girlfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> girlfaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> <span class="token string">"面目狰狞"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> blood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlood</span><span class="token punctuation">(</span><span class="token keyword">int</span> blood<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法的调用者去攻击参数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>attacks_desc<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token class-name">Kungfu</span> <span class="token operator">=</span> attacks_desc<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//输出攻击效果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Kungfu</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算伤害</span>        <span class="token keyword">int</span> hurt <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> remainBlood <span class="token operator">=</span> role<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> hurt<span class="token punctuation">;</span>        remainBlood <span class="token operator">=</span> remainBlood <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> remainBlood<span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setBlood</span><span class="token punctuation">(</span>remainBlood<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//受伤描述</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长相: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>face<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"血量: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>blood<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常有意思的文字游戏,很有成就感.</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文字游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2023/08/25/ce-shi/"/>
      <url>/2023/08/25/ce-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>0823日记</title>
      <link href="/2023/08/23/0823-ri-ji/"/>
      <url>/2023/08/23/0823-ri-ji/</url>
      
        <content type="html"><![CDATA[<p> 好难,一会要java一会c++一会go,我觉得是不是要先入行再想着转岗呢,现在要现有一个主业,然后再想着进阶或者转岗的事情呢?java工资确实低,但是总有工资高的,具体的怎么看呢,其实我自己是一个天生的喜欢偷懒的人,一旦有一个可以玩的借口了那就如同洪水猛兽一样不可控制,等到不想玩了时间又都过去了,空留懊悔,我觉得我应该一边学着黑马的视频,一边学着左程云的算法,一边进行分布式系统的课程进行学习,</p><p>黑马是底线,左程云是进阶,分布式是进进阶</p><p>同时到学校开始上课以后,我需要面对很多的课业,我得好好学以此来应对读研,读一年,然后一定要继续读博,回来拿编制,业余时间足够多之后去搞副业</p><p>我觉得人越是放松越是失去了目标,失去了动力,我也不知道为什么,网络上盛行着的躺平言论似乎并不适合年轻人,你要是说你到了中年身体所有可能性断绝了再去躺平也就是了,为啥要在有可能的时候去躺平呢,这是很难以理解的,他们那样的想法的出现好像是别人给他们的,他们不得不去实现别人给的目标才去躺平,可是那些目标好像就是我想要的啊,一辈子为了房子奋斗,但是要是两个人还款也没有那么不堪啊,自己一个人买小房子不就行了,我以后一定要读博然后当大学教授,这可是为数不多的阶层跃升的好机会,我已经错过了医生,也不想去严格的军工企业,不能再去错过这个了</p><p>​我突然还有一个想法,就是把目前的目标再去细化,细化到每一个可执行的步骤,最主要的就是可执行,执行不了就一直细化,知道细化到可执行不就行了吗</p>]]></content>
      
      
      <categories>
          
          <category> 心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学导论</title>
      <link href="/2023/08/21/ji-suan-ji-ke-xue-dao-lun/"/>
      <url>/2023/08/21/ji-suan-ji-ke-xue-dao-lun/</url>
      
        <content type="html"><![CDATA[<p>  锁存器</p><p>![](C:\Users\10482\Pictures\Screenshots\屏幕截图 2023-08-21 213555.png)</p><p>八进位器</p><p>![](C:\Users\10482\Pictures\Screenshots\屏幕截图 2023-08-21 205510.png)</p><p>cpu</p><p>一个寄存器追踪程序运行到哪了,指令地址寄存器</p><p>一个寄存器用来存当前地址,我们叫它指令地址寄存器</p><p><img src="C:\Users\10482\AppData\Roaming\Typora\typora-user-images\image-20230821222729540.png" alt="image-20230821222729540"></p>]]></content>
      
      
      <categories>
          
          <category> 英文课 </category>
          
          <category> 计算机科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学 </tag>
            
            <tag> 计算机存储设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局部变量和成员变量区别</title>
      <link href="/2023/08/19/ju-bu-bian-liang-he-cheng-yuan-bian-liang-qu-bie/"/>
      <url>/2023/08/19/ju-bu-bian-liang-he-cheng-yuan-bian-liang-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>​</p><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中,方法外</td><td>方法内,方法声明上</td></tr><tr><td>初始化值不同</td><td>有默认初始化值</td><td>没有,使用前需要赋值</td></tr><tr><td>内存位置不同</td><td>堆内存</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>对象创建而存在,对象消失而消失</td><td>随方法调用而存在,随方法运行结束而消失</td></tr><tr><td>作用域</td><td>整个类中有效</td><td>当前方法有效</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 局部变量 </tag>
            
            <tag> 成员变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javane</title>
      <link href="/2023/08/18/java-nei-cun-fen-pei/"/>
      <url>/2023/08/18/java-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<p> java内存分配介绍</p><p>栈:类似子弹夹,先进后出(方法,变量等)</p><p>方法运行时使用的内存,如main方法运行,进入方法栈中执行</p><p>堆:存储对象或组,new来创建的,都存储在堆内存</p><p>方法区: 存储可以运行的class文件</p><h4 id="jdk8以后取消方法区-新增元空间-把原来方法区进行拆分-有点进入元空间-有点进入堆"><a href="#jdk8以后取消方法区-新增元空间-把原来方法区进行拆分-有点进入元空间-有点进入堆" class="headerlink" title="(jdk8以后取消方法区,新增元空间,把原来方法区进行拆分,有点进入元空间,有点进入堆)"></a>(jdk8以后取消方法区,新增元空间,把原来方法区进行拆分,有点进入元空间,有点进入堆)</h4><p>本地方法栈:jvm在使用操作系统功能时使用,和开发无关</p><p>寄存器 : 给cpu使用,和开发无关</p><p>javabean类(实例类)</p><p>main类(测试类)</p><p><strong>封装:对象代表什么就得封装对应的数据,并提供数据对应的行为</strong></p><h2 id="一个对象的创建过程"><a href="#一个对象的创建过程" class="headerlink" title="一个对象的创建过程"></a>一个对象的创建过程</h2><p>1.加载class文件</p><p>2.申请局部变量</p><p>3.开辟堆空间</p><p>4.默认初始化</p><p>5.显示初始化</p><p>6.构造方法初始化</p><p>7.将堆内存中的地址值赋值给左边的局部变量</p><h1 id="this作用"><a href="#this作用" class="headerlink" title="this作用"></a>this作用</h1><p>区分局部变量和成员变量</p><p>this本质是方法调用者的地址值</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准javabean类</title>
      <link href="/2023/08/18/biao-zhun-javabean-lei/"/>
      <url>/2023/08/18/biao-zhun-javabean-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="标准javabean"><a href="#标准javabean" class="headerlink" title="标准javabean"></a>标准javabean</h1><p>1.类名见名知意</p><p>2.成员变量使用private修饰</p><p>3.至少使用两个构造方法</p><p>​1)无参构造</p><p>​2)带全部参数的构造</p><p>4.成员方法</p><p>​提供每一个成员变量对应的setXxx() / getXxx()</p><p>​如果有其它行为也需要写上</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaBean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法</title>
      <link href="/2023/08/18/gou-zao-fang-fa/"/>
      <url>/2023/08/18/gou-zao-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="构造方法作用"><a href="#构造方法作用" class="headerlink" title="构造方法作用:"></a>构造方法作用:</h4><p>​创建对象时,虚拟机自动调用,给成员变量进行初始化</p><h4 id="构造方法有几种-各自作用是什么"><a href="#构造方法有几种-各自作用是什么" class="headerlink" title="构造方法有几种?各自作用是什么?"></a>构造方法有几种?各自作用是什么?</h4><p>无参构造: 初始化对象成员变量均采用默认值</p><p>有参构造: 初始化对象时,同时可为对象赋值</p><h4 id="构造方法有哪些注意事项"><a href="#构造方法有哪些注意事项" class="headerlink" title="构造方法有哪些注意事项?"></a>构造方法有哪些注意事项?</h4><p>任何类定义出来默认自带无参数构造器,写不写都有</p><p>一旦定义了有参数构造器,无参构造器就没有了,此时就需要自己写无参数构造器了</p><p>建议在任何时候都写上空参和带全部参数的构造方法</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 构造方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或运算</title>
      <link href="/2023/08/15/yi-huo-yun-suan/"/>
      <url>/2023/08/15/yi-huo-yun-suan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">0^N = NN ^ N = 0交换律结合律<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="用异或的方式交换两个数"><a href="#用异或的方式交换两个数" class="headerlink" title="用异或的方式交换两个数"></a>用异或的方式交换两个数</h1><p>a[i] = a[i] * a[j];</p><p>a[j] = a[i] ^ a[j];</p><p>a[i] = a[i] ^ a[j];</p><h1 id="一组数-其余数有偶数次-只有一个数是有奇数次-的-求出这个数"><a href="#一组数-其余数有偶数次-只有一个数是有奇数次-的-求出这个数" class="headerlink" title="一组数,其余数有偶数次,只有一个数是有奇数次 的,求出这个数"></a>一组数,其余数有偶数次,只有一个数是有奇数次 的,求出这个数</h1><p>异或运算循环</p><h1 id="怎么把一个int类型的数提取出最右侧的1来"><a href="#怎么把一个int类型的数提取出最右侧的1来" class="headerlink" title="怎么把一个int类型的数提取出最右侧的1来"></a>怎么把一个int类型的数提取出最右侧的1来</h1><p>a&amp;((~a)+1)即a&amp;(-a)</p><h1 id="一个数组中有两种数出现了奇数次-其他数出现了偶数次-求出这两种数"><a href="#一个数组中有两种数出现了奇数次-其他数出现了偶数次-求出这两种数" class="headerlink" title="一个数组中有两种数出现了奇数次,其他数出现了偶数次,求出这两种数"></a>一个数组中有两种数出现了奇数次,其他数出现了偶数次,求出这两种数</h1><p>先循环,全部异或一遍,求出最后的数相当于奇数次 的两个数异或运算</p><p>之后得出一个数eor,求这个数eor二进制位上最右边为1的数a(见上问题)</p><p> 用一个数在数组中遍历,如果这个数与a与运算不为0,把数组的这个数与eor’进行异或运算</p><p>一遍遍历之后我们就得到了其中一个奇数</p><p>把这个奇数与eor进行位运算就得到了另一个奇数,很巧妙</p><h1 id="一个数组中有一种数出现k次-其他数都出现了M次-M-1-K"><a href="#一个数组中有一种数出现k次-其他数都出现了M次-M-1-K" class="headerlink" title="一个数组中有一种数出现k次,其他数都出现了M次,M>1,K<M,找到,出现了k次的数,要求:额外空间复杂度O(1),时间复杂度O(N)"></a>一个数组中有一种数出现k次,其他数都出现了M次,M&gt;1,K&lt;M,找到,出现了k次的数,要求:额外空间复杂度O(1),时间复杂度O(N)</h1><p>代码实现?</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 异或 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java语言自带排序</title>
      <link href="/2023/08/15/java-yu-yan-zi-dai-pai-xu/"/>
      <url>/2023/08/15/java-yu-yan-zi-dai-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>Arrays.sort(int[] a)<br>这种形式是对一个数组的所有元素进行排序，并且是按从小到大的顺序。</p><p>举例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>0 1 2 3 4 5 6 7 8 9</p><p>Arrays.sort(int[] a, int fromIndex, int toIndex)<br>这种形式是 对数组部分排序，也就是对数组a的下标从fromIndex到toIndex-1的元素排序，注意：下标为toIndex的元素不参与排序哦！</p><p>举例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找及对数器的使用</title>
      <link href="/2023/08/14/er-fen-cha-zhao-ji-dui-shu-qi-de-shi-yong/"/>
      <url>/2023/08/14/er-fen-cha-zhao-ji-dui-shu-qi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找及对数器检验"><a href="#二分查找及对数器检验" class="headerlink" title="二分查找及对数器检验"></a>二分查找及对数器检验</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Search</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样可以保证数组中的元素有正有负，且不超过maxValue。</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> testTimes <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">isExisted</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>success <span class="token operator">?</span> <span class="token string">"Nice"</span> <span class="token operator">:</span> <span class="token string">"Fucking fucked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExisted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*这段代码中，maxValue表示数组元素的最大绝对值，也就是说，数组中的元素的范围是-maxValue到maxValue之间。Math.random()方法会返回一个0到1之间的随机小数，所以(maxValue + 1) * Math.random()会返回一个0到maxValue + 1之间的随机小数。如果我们直接把这个小数转换成整数，那么我们得到的整数的范围是0到maxValue之间，而不是0到maxValue + 1之间。这样就会导致数组中的元素不能达到maxValue + 1这个值。为了让数组中的元素能够达到maxValue + 1这个值，我们需要在转换成整数之前，对这个小数加上0.5。这样，当这个小数大于或等于maxValue + 0.5时，转换成整数后就会变成maxValue + 1。然而，如果我们直接在(maxValue + 1) * Math.random()后面加上0.5，那么我们得到的小数的范围就会变成0.5到maxValue + 1.5之间。这样就会导致数组中的元素可能超过maxValue + 1这个值。为了避免这种情况，我们需要在(maxValue + 1) * Math.random()前面加上一个负号，然后再减去一个负号。这样，我们得到的小数的范围就会变成-maxValue - 1.5到-0.5之间。转换成整数后，就会变成-maxValue - 1到0之间。最后，我们再减去另一个(maxValue + 1) * Math.random()转换成整数后的值，就可以得到-maxValue - 1到maxValue + 1之间的随机整数了。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 对数器 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 对数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序及对数器的使用</title>
      <link href="/2023/08/14/pai-xu-ji-dui-shu-qi-de-shi-yong/"/>
      <url>/2023/08/14/pai-xu-ji-dui-shu-qi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="选择-冒泡-排序算法"><a href="#选择-冒泡-排序算法" class="headerlink" title="选择,冒泡,排序算法"></a>选择,冒泡,排序算法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cugbwfx<span class="token punctuation">.</span>javaMethod</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_SelectionSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArry</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>end <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span>end<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> newIndex <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>newIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                newIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> end <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> end<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> second<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//先想边界条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minValueIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/*if(arr[j]&lt;arr[min]){                    min = j;                }*/</span>                minValueIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>minValueIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minValueIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minValueIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArry</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对数器的使用-以检验排序算法为例"><a href="#对数器的使用-以检验排序算法为例" class="headerlink" title="对数器的使用,以检验排序算法为例"></a>对数器的使用,以检验排序算法为例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">randomLenRandomValue</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序算法有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 初学者 对数器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单排序 对数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同类型数据转二进制输出java</title>
      <link href="/2023/08/14/bu-tong-lei-xing-shu-ju-zhuan-er-jin-zhi-shu-chu-java/"/>
      <url>/2023/08/14/bu-tong-lei-xing-shu-ju-zhuan-er-jin-zhi-shu-chu-java/</url>
      
        <content type="html"><![CDATA[<h1 id="不同型数据转二进制输出"><a href="#不同型数据转二进制输出" class="headerlink" title="不同型数据转二进制输出"></a>不同型数据转二进制输出</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//将一个数以二进制形式输出</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num  <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制输出 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> java语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法及常数处理小技巧</title>
      <link href="/2023/08/14/er-fen-fa-ji-chang-shu-chu-li-xiao-ji-qiao/"/>
      <url>/2023/08/14/er-fen-fa-ji-chang-shu-chu-li-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="常数处理技巧-位运算"><a href="#常数处理技巧-位运算" class="headerlink" title="常数处理技巧(位运算)"></a>常数处理技巧(位运算)</h1><h5 id="R-L-2如果遇到19亿-20亿这样的数-会溢出"><a href="#R-L-2如果遇到19亿-20亿这样的数-会溢出" class="headerlink" title="(R+L)/2如果遇到19亿,20亿这样的数,会溢出"></a>(R+L)/2如果遇到19亿,20亿这样的数,会溢出</h5><p>所以用<strong>L+(R-L)/2</strong> 来防止溢出</p><p>而**(R-L)/2<strong>可以写为</strong>(R-L)&gt;&gt;1** </p><img src="C:\Users\10482\MyBlog\source\_posts\photo\壁纸.jpg" alt="壁纸" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
            <tag> 位运算处理(规避边界溢出) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对数器</title>
      <link href="/2023/08/14/dui-shu-qi/"/>
      <url>/2023/08/14/dui-shu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="生成随机数组"><a href="#生成随机数组" class="headerlink" title="生成随机数组"></a>生成随机数组</h1><h3 id="生成随机长度和随机值两个步骤"><a href="#生成随机长度和随机值两个步骤" class="headerlink" title="生成随机长度和随机值两个步骤"></a>生成随机长度和随机值两个步骤</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize <span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="随机数种子-Math-random"><a href="#随机数种子-Math-random" class="headerlink" title="随机数种子: Math.random()"></a>随机数种子: Math.random()</h5>]]></content>
      
      
      <categories>
          
          <category> 初学者 对数器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对数器 检验 随机数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从这个链接里面的博客学来的,保存一下链接防止以后找不着</title>
      <link href="/2023/08/13/cong-zhe-ge-lian-jie-li-mian-de-bo-ke-xue-lai-de-bao-cun-yi-xia-lian-jie-fang-zhi-yi-hou-zhao-bu-zhao/"/>
      <url>/2023/08/13/cong-zhe-ge-lian-jie-li-mian-de-bo-ke-xue-lai-de-bao-cun-yi-xia-lian-jie-fang-zhi-yi-hou-zhao-bu-zhao/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_58608526/article/details/124652412?spm=1001.2014.3001.5506">Hexo+Github博客搭建教程_hexo github_Cisyam-Leo的博客-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -&#39;博客搭建&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newdraft</title>
      <link href="/2023/08/13/newdraft/"/>
      <url>/2023/08/13/newdraft/</url>
      
        <content type="html"><![CDATA[<p> 这是一个草稿测试文章</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/08/13/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2023/08/13/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>1.2.1 网站<br>参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</p><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><p>1.2.2 网址<br>参数描述url网址root网站根目录 permalink文章的永久链接格式permalink_defaults永久链接中各部分的默认值</p><p>在这里，你需要把url改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是<a href="http://yoursite.com/2022/05/08/temp%E3%80%82">http://yoursite.com/2022/05/08/temp。</a></p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。</p><p>参数结果:year/:month/:day/:title/2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo/bar/hello-world</p><p>再往下翻，中间这些都默认就好了。</p><p>theme: landscap</p><p>theme就是选择什么主题，也就是在themes这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在themes文件夹下，再修改这个主题参数就可以了。</p><p>1.2.3 Front-matter<br>Front-matter 是md文件最上方以 —分隔的区域，用于指定个别文件的变量，举例来说：</p><p>title: Hexo+Github博客搭建记录<br>date: 2022-05-08 15:15:44</p><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数描述layout布局title标题date建立日期updated更新日期comments开启文章的评论功能tags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址</p><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说Foo，Bar不等于Bar，Foo；而标签没有顺序和层次。</p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo+Github博客搭建记录date: author: img: /medias/banner/7.jpgcoverImg: /medias/banner/7.jpgtop: truecover: truetoc: truepassword: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: truesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2.4 layout（布局）<br>1.2.4.1 post</p><p>当你每一次使用代码</p><p>hexo new XXX</p><p>它其实默认使用的是post这个布局，也就是在source文件夹下的_post里面。</p><p>Hexo有三种默认布局：post、page和draft，它们分别对应不同的路径，而您自定义的其他布局和post相同，都将储存到source/_posts文件夹。</p><p>而new这个命令其实是：</p><p>hexo new [layout] <title>&lt;/p&gt;&lt;p&gt;只不过这个layout默认是post罢了。&lt;/p&gt;&lt;p&gt;2.4.2 page&lt;/p&gt;&lt;p&gt;如果你想另起一页，那么可以使用&lt;/p&gt;&lt;p&gt;hexo new page newpage&lt;/p&gt;&lt;p&gt;系统会自动给你在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，这样你访问的newpage对应的链接就是&lt;a href="http://xxx.xxx/newpage"&gt;http://xxx.xxx/newpage&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2.4.3 draft&lt;/p&gt;&lt;p&gt;draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以&lt;/p&gt;&lt;p&gt;hexo new draft newdraft&lt;/p&gt;&lt;p&gt;这样会在source/_draft中新建一个newdraft.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用&lt;/p&gt;&lt;p&gt;hexo server –draft&lt;/p&gt;&lt;p&gt;在本地端口中开启服务预览。&lt;/p&gt;&lt;p&gt;如果你的草稿文件写完了，想要发表到post中，&lt;/p&gt;&lt;p&gt;hexo publish draft newdraft&lt;/p&gt;&lt;p&gt;就会自动把newdraft.md发送到post中。&lt;/p&gt;</title></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/13/hello-world/"/>
      <url>/2023/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
