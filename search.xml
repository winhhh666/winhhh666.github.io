<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的第一个游戏推箱子</title>
      <link href="/2023/10/21/wo-de-di-yi-ge-you-xi-tui-xiang-zi/"/>
      <url>/2023/10/21/wo-de-di-yi-ge-you-xi-tui-xiang-zi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c+" data-language="c+"><code class="language-c+">// ConsoleApplication1.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。//#include &lt;iostream&gt;#include&lt;cstring&gt;using namespace std;void print(char map[][100]) {for (int i = 0; i &lt; 5; i++) {for (int j = 0; j &lt; 8; j++) {if (!map[i][j]) cout &lt;&lt; ' ';else cout &lt;&lt; map[i][j];}cout &lt;&lt; endl;}cout &lt;&lt; "w:上  a:左  s:右  z:下" &lt;&lt; endl;}int main(){char map[100][100];memset(map, 0, sizeof map);for (int i = 0; i &lt; 8; i++) {map[0][i] = '#';map[4][i] = '#';}for (int j = 1; j &lt; 4; j++) {map[j][0] = '#';map[j][7] = '#';}int x=1, y=5;int xPoint1 = 1, yPoint1 = 2;int xPoint2 = 1, yPoint2 = 3;int xBox1 = 2, yBox1 = 2, xBox2 = 2, yBox2 = 3;char move;int dx = 0, dy = 0;bool solve1 = 0;bool solve2 = 0;int solves = 0;while (true) {//getInput();//updateGame();//draw();if (solve1) {map[xBox1][yBox1] = '0';}else if (solve1 == 0) {map[xPoint1][yPoint1] = '.';map[xBox1][yBox1] = 'o';}if (solve2) {map[xBox2][yBox2] = '0';}else if (solve2 == 0) {map[xPoint2][yPoint2] = '.';map[xBox2][yBox2] = 'o';}map[x][y] = 'p';print(map);if (solves == 2) {printf("bro你已经完成了这个游戏");return 0;}cin &gt;&gt; move;switch (move) {case 'w':x -= 1;dx = -1;dy = 0;break;case 'z':x += 1;dx = 1;dy = 0;break;case 'a':y -= 1;dx = 0;dy = -1;break;case 's':y += 1;dx = 0;dy = 1;break;default:cout &lt;&lt; "非法操作,请重新输入" &lt;&lt; endl;continue;break;}if (map[x][y]==0 ||(map[x][y] =='.')) {map[x - dx][y - dy] = 0;continue;}else if(map[x][y] == '#' || map[x][y] == '0'){x-=dx;y-=dy;continue;}else {int xtemp = x+dx, ytemp = y+dy;if (map[xtemp][ytemp] == 0) {if (x == xBox1 &amp;&amp; y == yBox1) {xBox1 = xtemp;yBox1 = ytemp;}else if (x == xBox2 &amp;&amp; y == yBox2) {xBox2 = xtemp;yBox2 = ytemp;}map[x - dx][y - dy] = 0;}else if (map[xtemp][ytemp] == '.') {if (x == xBox1 &amp;&amp; y== yBox1) {xBox1 = xtemp;yBox1 = ytemp;solve1 = 1;solves++;}else if (x == xBox2 &amp;&amp; y == yBox2) {xBox2 = xtemp;yBox2 = ytemp;solve2 = 1;solves++;}map[x - dx][y - dy] = 0;}else if (map[xtemp][ytemp] == '#' || map[xtemp][ytemp] == '0') {x -= dx;y -= dy;continue;}}}}// 运行程序: Ctrl + F5 或调试 &gt;“开始执行(不调试)”菜单// 调试程序: F5 或调试 &gt;“开始调试”菜单// 入门使用技巧: //   1. 使用解决方案资源管理器窗口添加/管理文件//   2. 使用团队资源管理器窗口连接到源代码管理//   3. 使用输出窗口查看生成输出和其他消息//   4. 使用错误列表窗口查看错误//   5. 转到“项目”&gt;“添加新项”以创建新的代码文件，或转到“项目”&gt;“添加现有项”以将现有代码文件添加到项目//   6. 将来，若要再次打开此项目，请转到“文件”&gt;“打开”&gt;“项目”并选择 .sln 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VS工具模块扩展</title>
      <link href="/2023/10/18/vs-gong-ju-mo-kuai-kuo-zhan/"/>
      <url>/2023/10/18/vs-gong-ju-mo-kuai-kuo-zhan/</url>
      
        <content type="html"><![CDATA[<p> VS visual studio 2019 获取新的工具或功能 安装新的模块</p><h4 id="点击：工具-获取工具与功能-点击打开模块安装器：installer"><a href="#点击：工具-获取工具与功能-点击打开模块安装器：installer" class="headerlink" title="点击：工具 >> 获取工具与功能 >> 点击打开模块安装器：installer"></a>点击：工具 &gt;&gt; 获取工具与功能 &gt;&gt; 点击打开模块安装器：installer</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>stl库函数</title>
      <link href="/2023/10/18/stl-ku-han-shu/"/>
      <url>/2023/10/18/stl-ku-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="include"><a href="#include" class="headerlink" title="#include"></a>#include<vector></vector></h1><p>变长数组</p><p>面对大规模数组时</p><p>支持随机访问,但是不支持在任意位置O(1)插入</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;vector&gt;vector&lt;int&gt; a;//相当于一个长度动态变化的int数组a.size();返回包含元素的个数a.empty();//空为true,非空为falsea.clear();//把vector清空//所有的stl容器都支持这两个函数,用法相同,函数也相同vector&lt;int&gt;  b[233];//相当于第一维长233,第二维长度动态变化的int数组struct rec{...}vector&lt;rec&gt; c;自定义的结构体类型也可以保存在vector中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>可以当成指针来看</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;::iterator it = a.begin();a.end();//a最后一个元素的后一个元素,大部分stl容器都有vector的迭代器是"随机访问迭代器",即与指针类似it+1;//即为a[1]的指针*it;//访问值*a.begin() = a[0];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>begin()</p><p>end()//基本上都是左闭右开</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a({1, 2, 3});for(int i=0; i&lt;a.size(); i++) cout &lt;&lt; a[i] &lt;&lt;' ';等价于    auto i = a.begin();for(vector&lt;int&gt;::iterator/*auto*/ i = a.begin(); i!=a.end(); i++)    cout &lt;&lt; *i &lt;&lt;' ';也有范围遍历for(int x : a) cout &lt;&lt; x &lt;&lt;' ';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价头元素返回</p><p>a.front()     a[0]    *a.begin()</p><p>a.back() 最后一个元素</p><p>a.end() 最后一个元素后一个位置</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp类和对象</title>
      <link href="/2023/10/14/cpp-lei-he-dui-xiang/"/>
      <url>/2023/10/14/cpp-lei-he-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="c-面向对象三大特性-封装继承-多态"><a href="#c-面向对象三大特性-封装继承-多态" class="headerlink" title="c++面向对象三大特性:封装继承,多态"></a>c++面向对象三大特性:封装继承,多态</h2><p>c++认为万事万物皆为对象,对象上有其属性和行为</p><p>学生类:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Student {public:    string name;    int num;    void setName(string name){        this.name = name;    }    void setNum(int num) {        this.name = num;    }        void showName(){        cout &lt;&lt; name &lt;&lt; endl;    }        void showNum(){        cout &lt;&lt; num  &lt;&lt; endl;    }};//记住类最后的这个分号;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//类中的属性和行为 我们统一称为成员</p><p>//属性 成员属性 成员变量</p><p>//行为 成员函数 成员方法</p><p>封装意义二:</p><p>类在设计时,可以把属性和行为放在不同的权限下,加以控制</p><p>访问权限有三种:<br>public 公共权限 类内可 类外可</p><p>protected 保护权限  类内可以 类外不可 //子类有访问父类的权限</p><p>private 私有权限 类内可 类外不可//子类没有访问父类的权限</p><h1 id="struct-和class区别"><a href="#struct-和class区别" class="headerlink" title="struct 和class区别"></a>struct 和class区别</h1><p>c++中唯一区别在于 <strong>默认访问权限不同</strong></p><p>struct 默认公有</p><p>class 默认私有</p><p>设置成私有可以自己控制权限,并且可以对写入的数据加以限制</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><strong>构造函数</strong>:创建对象时系统自动调用 构造函数语法: 类名() {}</p><p>构造函数可以有参数,因此可以发生重载p><p><strong>析构函数</strong>:销毁对象前系统自动调用,执行清理工作 析构函数语法:~类名(){}</p><p>析构函数不可以有参数,无法重载(如在函数中创建的对象在函数结束前会调用)</p><h2 id="都没有返回值-如果不写-系统会自己调用"><a href="#都没有返回值-如果不写-系统会自己调用" class="headerlink" title="都没有返回值,如果不写,系统会自己调用"></a>都没有返回值,如果不写,系统会自己调用</h2><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数:"></a>构造函数:</h2><p>普通构造:<br>拷贝构造: Person(const Person p);</p><p>不同构造的类创建对象形式</p><p>有参构造:Person p1(10);</p><p>默认构造 Person p2;</p><p>拷贝构造: Person p3(p1);</p><h1 id="类创建对象的三种方法"><a href="#类创建对象的三种方法" class="headerlink" title="类创建对象的三种方法"></a>类创建对象的三种方法</h1><h1 id="1-括号法"><a href="#1-括号法" class="headerlink" title="1.括号法()"></a>1.括号法()</h1><p>调用默认构造时不要加上()</p><p><strong>原因</strong> 在编译器中Person p1(); 会被认为是一个函数的声明</p><h2 id="2-显示法"><a href="#2-显示法" class="headerlink" title="2.显示法"></a>2.显示法</h2><p>Person p1 = Person(10);</p><p><strong>原因</strong> Person(10);是一个匿名对象</p><h3 id="匿名对象特点"><a href="#匿名对象特点" class="headerlink" title="匿名对象特点:"></a>匿名对象特点:</h3><p>当前行结束后,系统立即回收匿名对象</p><p>注意事项</p><p>//不要用拷贝构造函数初始化匿名对象,编译器会认为Person(p3) == Person p3;</p><h2 id="3-隐式转换法"><a href="#3-隐式转换法" class="headerlink" title="3.隐式转换法"></a>3.隐式转换法</h2><p>Person p4 = 10;//相当于写了Person p4 = Person(10);</p><h1 id="拷贝函数调用时机"><a href="#拷贝函数调用时机" class="headerlink" title="拷贝函数调用时机"></a>拷贝函数调用时机</h1><p>1.使用一个已经创建完毕的对象来初始化另一个新对象</p><p>2.值传递的方式给函数参数传值//实参传给形参的时候</p><p>3.值方式返回局部对象</p><p>Person p = doWork2();</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Person dowork2(){Person p1;    return p1;//这里并不是真的返回p1,p1在函数结束后就被销毁了,而是创建一个拷贝构造的对象}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h1><p>默认情况下,c++编译器至少给一个类添加3个函数</p><p>1.默认构造参数(无参, 函数体为空)</p><p>2.默认析构函数(无参, 函数体为空)</p><p>3.默认拷贝构造函数,对属性进行值拷贝</p><h2 id="如果用户定义有参构造函数-c-不再提供默认无参构造-但是会提供默认拷贝构造"><a href="#如果用户定义有参构造函数-c-不再提供默认无参构造-但是会提供默认拷贝构造" class="headerlink" title="如果用户定义有参构造函数 c++不再提供默认无参构造  但是会提供默认拷贝构造"></a>如果用户定义有参构造函数 c++不再提供默认无参构造  但是会提供默认拷贝构造</h2><h2 id="如果用户定义拷贝构造函数-c-不会再提供其它构造函数-就是那三个默认都不行了"><a href="#如果用户定义拷贝构造函数-c-不会再提供其它构造函数-就是那三个默认都不行了" class="headerlink" title="如果用户定义拷贝构造函数,c++不会再提供其它构造函数(就是那三个默认都不行了)"></a>如果用户定义拷贝构造函数,c++不会再提供其它构造函数(就是那三个默认都不行了)</h2><h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><p>浅拷贝: 简单的赋值拷贝操作</p><p>深拷贝: 在堆区重新申请空间,进行拷贝操作</p><p>浅拷贝带来的问题:堆区的重复释放</p><p><strong>例子</strong> : p1 中定义一个指针,该指针在堆区中开辟(在析构函数中回收),然后用默认的浅拷贝操作Person p2(p1)会直接把p1中指针的地址拷贝过来,然后由于函数在栈中先进后出的特性, p2被栈自动回收之后系统自动调用析构函数回收一遍指针指向的内存,到p1之后又执行这样的一次操作,导致程序崩溃</p><p>解决方法:自己实现拷贝构造函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Person(const Person&amp; p){    m_Age = p.m_Age;    //m_Height = p.m_Height;编译器默认实现就是这行代码    //深拷贝操作        m_Height = new int(*p.m_Height);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结-如果属性有在堆区开辟的-一定要自己提供拷贝构造函数-防止浅拷贝带来的问题"><a href="#总结-如果属性有在堆区开辟的-一定要自己提供拷贝构造函数-防止浅拷贝带来的问题" class="headerlink" title="总结:如果属性有在堆区开辟的,一定要自己提供拷贝构造函数,防止浅拷贝带来的问题"></a>总结:如果属性有在堆区开辟的,一定要自己提供拷贝构造函数,防止浅拷贝带来的问题</h2><h1 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表:"></a>初始化列表:</h1><p><strong>作用</strong></p><p>c++提供了初始化列表语法,用来初始化属性</p><p>构造函数(): 属性1(值1), 属性2(值2) … {}</p><p>示例</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Person(int a, int b, int c) : m_A(a), m_B(b), m_C(c) const{    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h2><p>c++类中的成员可以是另一个类中的对象,我们称该成员为对象成员</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A {}class B{    A a;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Phone{public:     string m_PName;}class Person{public:    //Phone m_Phone = pName 隐式转换法    Person(string name, string pName):m_Name(name), m_Phone(pName)    {            }    string m_Name;    Phone m_Phone;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题来了:先有了人的构造还是先有了手机的构造?</p><p>先有了手机的构造再有人的构造</p><p>当其他类作为本类成员,构造时候先构造类对象再构造自身,析构顺序是先本类析构再其他类析构</p><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><h2 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h2><p> 所有对象共享一份数据]</p><p>在编译阶段分配内存<br><strong>类内声明</strong> <strong>类外初始化</strong></p><p>(对于pubic类型的)有两种访问的方法:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1.通过对象访问    Person p1;cout &lt;&lt; p1.a;2.通过类直接访问cout &lt;&lt; Person::a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(对于private类型的)只有通过对象访问</p><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>所有对象共享同一个函数<br>静态成员函数只能访问静态成员变量</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1.通过对象访问    Person p;p.func();2.通过类名访问    Person::func();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="c-对象模型和this指针"><a href="#c-对象模型和this指针" class="headerlink" title="c++对象模型和this指针"></a>c++对象模型和this指针</h1><h2 id="成员变量和成员函数是分开存储的"><a href="#成员变量和成员函数是分开存储的" class="headerlink" title="成员变量和成员函数是分开存储的"></a>成员变量和成员函数是分开存储的</h2><p>空对象:</p><p>占内存空间为1<br>原因:c++编译器会给每个空对象分配一个字节空间来区分空对象占内存的位置<br>每个空对象也应该有一个独一无二的内存地址</p><h3 id="只有非静态成员变量才在类对象中占用内存"><a href="#只有非静态成员变量才在类对象中占用内存" class="headerlink" title="只有非静态成员变量才在类对象中占用内存"></a>只有非静态成员变量才在类对象中占用内存</h3><h1 id="c-内存对齐"><a href="#c-内存对齐" class="headerlink" title="c++内存对齐"></a>c++内存对齐</h1><p>每个特定平台上的编译器都有自己的默认“对齐系数”（也叫对齐模数）。gcc中默认#pragma pack(4)，可以通过预编译命令#pragma pack(n)，n = 1,2,4,8,16来改变这一系数。</p><p>有效对其值：是给定值#pragma pack(n)和结构体中最长数据类型长度中较小的那个。有效对齐值也叫<strong>对齐单位</strong>。</p><p>了解了上面的概念后，我们现在可以来看看内存对齐需要遵循的规则：</p><p>(1) 结构体第一个成员的<strong>偏移量（offset）</strong>为0，以后每个成员相对于结构体首地址的 offset 都是<strong>该成员大小与有效对齐值中较小那个</strong>的整数倍，如有需要编译器会在成员之间加上填充字节。</p><p>(3) <strong>结构体的总大小</strong>为 有效对齐值 的<strong>整数倍</strong>，如有需要编译器会在最末一个成员之后加上填充字节。</p><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针:"></a>this指针:</h1><p>this 指针指向被调用的成员函数所属的对象</p><p>1.解决名称冲突</p><p>2.返回对象本身*this</p><h1 id="链式编程思想"><a href="#链式编程思想" class="headerlink" title="链式编程思想"></a>链式编程思想</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Person&amp; PersonAddAge(Person &amp;p){this-&gt;age += p.age;    return *this;}p2.PersonAddAge(p).PersonAddAge(p);或者例如:cout &lt;&lt; c1 &lt;&lt; c2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="const修饰成员"><a href="#const修饰成员" class="headerlink" title="const修饰成员"></a>const修饰成员</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//在对象前加const ,变为常对象const Person p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>this这个指针其实是指针常量</p><p>在成员函数那里加上const就变成常函数,<br>本质是 const Person* this;无法修改值</p><p>但是在变量前加上mutable 就可以修改了,常函数和</p><h2 id="常对象"><a href="#常对象" class="headerlink" title="常对象:"></a>常对象:</h2><p>声明对象前加const称该对象为常对象</p><p><strong>常对象</strong>只能调用<strong>常函数</strong></p><h1 id="空指针调用成员函数"><a href="#空指针调用成员函数" class="headerlink" title="空指针调用成员函数"></a>空指针调用成员函数</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Person{    public:    void showName(){        cout &lt;&lt;"name";    }    int showAge(){        //为了代码健壮性,加上这行        if(this == NULL) return ;        return age;    }private:            int age;   };void test01(){Person* p = NULL;    p-&gt;showName;//不会崩    p-&gt;showAge;//会崩,因为用到this指针}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h1><h2 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Building{  friend void goodBoy(Building *building); };void goodBoy(Building *building){    ....}void test(){    Building build;    gooBoy(&amp;build);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Building;class GoodGay{public:    GoodGay();    void visit(); // 参观函数,访问building中的属性        Building *building;}GoodGay::GoodGay(){    building =  new Building();}void GoodGay::visit(){    cout &lt;&lt; builing-&gt;m_SittingRoom;    }class Building{friend class GoodGay;//类做友元public:    Building();public :    string m_SittingRoom;private:    string m_bedingRoom;}//类外写成员函数Building::Builing(){    m_SittingRoom = "客厅";    m_BedRoom= "卧室";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成员函数做友元</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class GoodGay(){public:    GoodGay();    void visit(); //让visit函数可以访问building中的私有成员    void visit2();//不可访问    Building *building; }class Building{    friend void GoodGay::visit();public:    Building();public:    string m_SittingRoom;private:    string m_BedRoom;}Building::building(){    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><p>对已有的运算符重新定义,赋予另一种功能以适应不同的数据类型</p><h2 id="通过成员函数重载加号"><a href="#通过成员函数重载加号" class="headerlink" title="通过成员函数重载加号"></a>通过成员函数重载加号</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Person operator+ (Person &amp;p){    Person temp;    temp.m_A = this-&gt;m_A + p.m_A;    temp.m_B = this-&gt;m_B + p.m_B;    return temp;}Person p3 = p1.operator+(p2);//简化为:Person p3 = p1 + p2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过全局函数来重载加号"><a href="#通过全局函数来重载加号" class="headerlink" title="通过全局函数来重载加号"></a>通过全局函数来重载加号</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Person operator+(Person &amp;p1, Person &amp;p2){    Person temp;    temp.m_A = p1.m_A + p2.m_A;    temp.m_b = p1.m_B + p2.m_B;    return temp;}Person p3 = operator+(p1, p2);//等价于Person p3 = p1 + p2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运算符重载也可以发生函数重载</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.对于内置的数据类型的表达式的运算符是不可能发生改变的</p><p>2.不要滥用运算符</p><h1 id="重载左移运算符"><a href="#重载左移运算符" class="headerlink" title="重载左移运算符"></a>重载左移运算符</h1><p>使用成员函数重载运算符时会出现 p.operator&lt;&lt;(cout)即p &lt;&lt; cout ;所有通常不这么用</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ostream&amp; operator(ostream &amp;cout , Person &amp;p){//本质 operator&lt;&lt;(cout , p);    cout &lt;&lt;p.ma&lt;&lt;p.mb;    return cout;}void test01(){    Person p;    p.m_A = 10;    p.m_B = 10;        cout &lt;&lt; p;//利用全局函数重载它}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如果属性是私有的-如何利用重载之后的函数访问"><a href="#如果属性是私有的-如何利用重载之后的函数访问" class="headerlink" title="如果属性是私有的,如何利用重载之后的函数访问?"></a>如果属性是私有的,如何利用重载之后的函数访问?</h2><p>在被访问的类中加上</p><p>friend ostream&amp; operator(ostream &amp;cout , Person &amp;p);</p><h1 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a = 10;cout &lt;&lt; ++a &lt;&lt; endl;//11cout &lt;&lt; a &lt;&lt; endl ;//11int b = 10;cout &lt;&lt; b++ &lt;&lt; endl;//10cout &lt;&lt; b &lt;&lt; endl;//11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class MyInteger{    friend ostream&amp; operator&lt;&lt;(ostream&amp;  cout, MyInteger myint); public:    MyInteger()    {        m_Num = 0;    }//重载前置++运算符    MyInteger&amp; operator++()    {        m_Num++;        return *this;    }    //重载后置++运算符    MyInteger operator++()    {        MyInteger temp = *this;        m_Num++;        return temp;    }private:    int m_Num;}void test01(){    MyInteger myint;    cout&lt;&lt;++(++myint) &lt;&lt; endl;    cout &lt;&lt; myint &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h1><p>c++编译器至少给一个类添加至少4个函数</p><p>1.默认构造函数(无参, 函数体为空)</p><p>2.默认析构函数(无参, 函数体为空)</p><p>3.拷贝函数(默认只有浅拷贝)</p><p>4.赋值运算符operator= 对属性进行值拷贝</p><p>如果类中有属性指向堆区,做赋值操作时会出现深浅拷贝的问题</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Person{public:    Person(int age)    {        m_age = new int(age);    }    ~Person(){        if(m_age!=NULL) {            delete m_age;            m_age = NULL;        }            }        //重载 赋值运算符    Person&amp; operator(Person &amp;p)    {        if(m_Age!=NULL){     delete m_age;            m_age = NULL;        }        m_age = new int(*p.m_age);        return *this;     }    int *m_age;}void test01(){    Person p1(18);    Person p2(20);    p2 = p1;//赋值操作    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="重载关系运算符"><a href="#重载关系运算符" class="headerlink" title="重载关系运算符"></a>重载关系运算符</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Person{public:    Person(string name, int age)    {        this-&gt;m_name = name;        this-&gt;m_age = age;    }        bool operator==(Person &amp;p){        if(this.m_name == p.nName &amp;&amp; this-&gt;m_Age == p.m_Age)        {            return true;        }        else        {            return false;        }    }    bool operator!=(Person &amp;p){        if(this.m_name == p.nName &amp;&amp; this-&gt;m_Age == p.m_Age)        {            return false;        }        else        {            return true;        }    }}void test(Person &amp;p1, Person &amp;p2){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h1><p>即() 也可以重载</p><p>重载后使用的方式非常像函数的调用,因此被称仿函数</p><p>仿函数无固定写法,比较灵活</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//写在Person的类中void operator() (string test){    cout &lt;&lt; test &lt;&lt; endl;}Person print;print("sdiuahuda");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名函数对象</p><p>Myadd()(100, 100) ;</p><h1 id="继承-减少重复的代码量"><a href="#继承-减少重复的代码量" class="headerlink" title="继承(减少重复的代码量)"></a>继承(减少重复的代码量)</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class BasePage{public:    void left();    void top();    void bottom();};//继承//语法: class 子类 : 继承方式 父类//子类  派生类//父类 基类class Java : public BasePage{public:    void content()    {        cout &lt;&lt; "java学科视频" &lt;&lt; endl;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数重载</title>
      <link href="/2023/10/14/han-shu-chong-zai/"/>
      <url>/2023/10/14/han-shu-chong-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><p>函数名可以相同,提高复用性</p><p>函数重载满足条件:</p><p>同一个作用域下  函数名称相同 函数参数类型不同或个数不同或顺序不同</p><p><strong>注意</strong>:函数返回值不能作为函数重载的条件</p><p>函数重载的注意事项</p><p>1.引用作为重载的条件</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void fuc(int &amp;a){cout &lt;&lt; "fuc(int &amp;a)调用" &lt;&lt; endl;}void fuc(const int &amp;a){    cout &lt;&lt; "fuc(const int&amp; a)调用"  &lt;&lt; endl;}//传变量调用第一个,传不可修改的常量用第二个int a = 1;fuc(a);func(1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.函数重载碰到默认参数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func2(int a, int b=0);void func2(int a);//如果像这样调用函数就会出错:二义性出现导致冲突func2(2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp函数重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2023/10/11/mian-xiang-dui-xiang/"/>
      <url>/2023/10/11/mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p> c++在执行时,内存分为4个区域</p><h1 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h1><p>代码区:存放函数体的二进制代码,由操作系统管理</p><p>全局区:存放全局变量和静态变量和常量</p><p>栈区: 由编译器自动分配和释放,存放函数的参数值,局部变量等</p><p>堆区:由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</p><h3 id="四个区意义"><a href="#四个区意义" class="headerlink" title="四个区意义:"></a>四个区意义:</h3><p>不同区放的数据赋予不同的生命周期,给我们更大的灵活编程</p><h2 id="1-1程序运行前"><a href="#1-1程序运行前" class="headerlink" title="1.1程序运行前"></a>1.1程序运行前</h2><p>在程序编译后,生成了exe可执行程序,未执行该程序前分为两个区域</p><p>代码区:</p><p>​存放cpu执行的机器指令</p><p>​代码区是共享的,共享的目的是对于频繁被执行的程序,,只要在内存中有一份代码即可</p><p>​代码区是只读的,使其只读的原因是防止程序意外的修改了它的指令</p><p>全局区:</p><p>​全局变量和静态变量存放在此</p><p>​全局区还包含常量区,字符串常量和其他常量也存放在此</p><p>该区域数据在程序结束后由操作系统释放</p><table><thead><tr><th><strong>不在全局区中</strong></th><th><strong>全局区</strong></th></tr></thead><tbody><tr><td>局部变量,const修饰的局部变量(局部常量)</td><td><br>全局变量<br>静态变量 static关键字<br>常量<br>字符串常量<br>const修饰的全局变量(全局常量)</td></tr></tbody></table><h1 id="栈区"><a href="#栈区" class="headerlink" title="栈区:"></a>栈区:</h1><p>栈区数据注意事项:–不要返回局部变量的地址//非法操作,不过返回之后的 第一次操作编译器会保留之前局部变量地址的内容</p><p>//栈区的数据由编译器管理开辟和释放</p><p>void fu</p><h1 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h1><p>int* p = new int(10);</p><p>delete p;</p><p>int *arr = new int[10];//开辟数组</p><p>删除数组时:delete[] arr;</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用:"></a>引用:</h1><p>引用必须初始化,且不可更改了</p><p>引用作为函数返回值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int&amp; test02(){    static int a = 10;//静态变量,存放在全局区,全局区上的数据在程序结束后释放    return a;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数调用作为左值用法 </p><p>int &amp;ref  = test02();</p><p>test02() = 1000;//如果函数的返回值是引用,这个函数调用可以作为左值</p><h2 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质:"></a>引用的本质:</h2><p>在c++内部实现是一个指针常量</p><p>int&amp; ref = a;</p><p>发现是引用,转换为int* const ref = &amp;a;</p><p>ref = 20;内存发现引用,转换成指针*ref = 20;</p><h2 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h2><p>应用场景来修饰形参,防止误操作</p><p>const int &amp;ref = 10;//直接int&amp; ref = 10;会报错,因为引用本身需要一个合法的内存空间,因此这行错误</p><p>//加上const之后, 编译器将代码修改为int temp = 10; const int&amp; ref = temp;</p><p>加入const之后变成只读不可修改</p><p>void showValue(const int &amp;val){</p><p>​cout &lt;&lt; “val = “ &lt;&lt; val &lt;&lt; endl;</p><p>}</p><h1 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h1><p>int fuc(int a, int b = 20, int c = 30){</p><p>}</p><p>fuc(10);</p><p>如果某个位置已经有了默认参数,那么从这个位置往后,从左到右都必须有默认值</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opengl教程</title>
      <link href="/2023/10/07/opengl-jiao-cheng/"/>
      <url>/2023/10/07/opengl-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="头文件系列"><a href="#头文件系列" class="headerlink" title="头文件系列:"></a>头文件系列:</h3><p>#include&lt;glad/glad.h&gt;</p><p>#include&lt;GLFW/glfw3.h&gt;</p><p>//建议在自己的glcommin.h头文件里写这两行, 然后用gl和glfw就导入这个glcommon.h这样就能保证顺序不乱,其他gl库类似</p><p>glfw-跨平台的opengl窗口管理库</p><p>加上错误处理这个次要干扰项:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">初始化GLFW这个库    glfwInit(); //初始化glfw这个库if(!glfwInit()) {​throw std::runtime_error("faliled to initialize GLFW");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//使用glfw创建一个窗口:auto window = glfwCreatWindow(640, 480, "Example");创建一个宽640像素,长640像素, 标题为"Example"的窗口创建完窗口后就要开始绘制图案了, 如何让gl函数知道要在哪一个窗口上画图呢? Opengl有一个概念叫做上下文    画一个方块从哪画呢?先告诉上下文语境:glfwMakeContextCurrent(window);GLFWwindow *window = glfwCreatWindow(640, 480, "Example", NULL, NULL);if(!window) {    glfwTerminate();    throw std::runtime_error("GLFW failed to create window");    glfwMakeContextCurrent(window);} 初始化GLAD库//有了上下文之后,就可以初始化GLAD这个库了     gladLoadGL(); //处死话GLAD,加载函数指针<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">glfwInit();glfwMakeContextCurrent(window);gladLoadGL();while(!glfwWindowShouldClose(window)){    //画图    render();//我们决定把画图部分统一封装在另一个render函数里面       // glFlush();        //以前的窗口都是单缓冲的,现在glfw创建窗口都是双缓冲的 ,需要调用glfwSwapBuffers代替glFlush        glfwSwapBuffers(window);        glfwPollEvents();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>acwing刷题记录</title>
      <link href="/2023/10/05/acwing-shua-ti-ji-lu/"/>
      <url>/2023/10/05/acwing-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="753平方矩阵"><a href="#753平方矩阵" class="headerlink" title="753平方矩阵"></a>753平方矩阵</h1><p><a href="https://www.acwing.com/solution/content/71619/">AcWing 753. 平方矩阵 I（曼哈顿距离思想求解+蛇形矩阵思想求解+观察法求解） - AcWing</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cmath&gt;using namespace std;int main(){int n;while(cin &gt;&gt; n, n){for(int i=0; i&lt;n; i++){for(int j = 0; j&lt;n; j++){cout &lt;&lt; min(min(i+1, j+1), min(n-i, n-j)) &lt;&lt;' ';}cout &lt;&lt; endl ;}        cout &lt;&lt; endl;}}//解法二:利用蛇形矩阵偏移量解法#include&lt;iostream&gt;using namespace std;const int N = 110;int a[N][N];int n;int main(){   while(cin&gt;&gt; n, n){   int dx[] = { -1, 0, 1, 0};    int dy[] = { 0, 1, 0, -1};    int d = 1;    int num = 1, x=0, y=0;    for(int i=0; i&lt;n*n; i++){        a[x][y] = num;        int k = x + dx[d];        int j= y+ dy[d];        if(k&lt;0 || k&gt;=n || j&lt;0 ||j&gt;=n || a[k][j]){            d  = (d+1) %4;            if(d == 1){              num++;            }        }    }    for(int i=0; i&lt;n; i++){        for(int j=0; j&lt;n; j++){            cout &lt;&lt; a[i][j] &lt;&lt; ' ';        }        cout &lt;&lt; endl;    }       cout &lt;&lt; endl;   }}//曼哈顿距离法:#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main(){    int n;    while(cin &gt;&gt; n, n ){        for (int i = 0; i &lt; n; i ++){            for (int j = 0; j &lt; n; j ++){                if (n % 2)                     cout &lt;&lt; (n + 1) / 2 - max(abs(n / 2 - i), abs(n / 2 - j)) &lt;&lt; ' ';                else                    cout &lt;&lt; (n + 1) / 2.0 - max(abs((n - 1) / 2.0 - i), abs((n - 1) / 2.0 - j)) &lt;&lt; ' ';            }            cout &lt;&lt; endl;        }        cout &lt;&lt; endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="756蛇形矩阵"><a href="#756蛇形矩阵" class="headerlink" title="756蛇形矩阵"></a>756蛇形矩阵</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N = 110;int  n,m;int a[N][N];int main (){    cin &gt;&gt; n &gt;&gt; m;    int dx[] = { -1, 0, 1, 0};    int dy[] = { 0, 1, 0, -1};    int d = 1, x=0, y=0;    for(int i=1; i&lt;=n * m; i++){        a[x][y] = i;        int k = x + dx[d];        int j = y + dy[d];        if(k&lt;0 ||j&lt;0 ||k&gt;=n || j &gt;=m || a[k][j]){            d = (d+1)%4;        }        x = x + dx[d];        y = y + dy[d];    }    for(int i=0, i&lt; n; i++){        for(int j=0; j&lt; m; j++){            cout &lt;&lt; a[i][j] &lt;&lt;' ';        }        cout &lt;&lt; endl;    }        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;cstring&gt;memset(arr, 0, n*sizeof (int)/*或者sizeof int,可以不加括号*/);memset(arr, -1, n*sizeof(int));memcpy(dest, src, sizeof(src));/拷贝数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>c语言方法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不能读含有空格,换行符的字符串</span><span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//能读取含空格的字符串,同时自动去掉换行符\n</span><span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//能读空格且能读\n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>c++方法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;string&gt;string str;cin &gt;&gt; str; //不能读取含空格,换行符的字符串getline(cin, str);//能读取含空格的字符串,同时自动去掉换行符\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串操作</p><p>c方法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">char</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o(N)复杂度,使用前最好用变量保存字符串长度</span><span class="token function">strcat</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把字符串b拼接到a之后,拼接后的字符串保存在a中</span><span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据字典排序比较字符串</span><span class="token function">strcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把a中的内容拷贝到字符串b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c++方法:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str;string s(5, 'a');//构造重复字符的字符串str.empty(); //判空str.size(); //长度, 与strlen()不同的是这个复杂度为O(1),不用额外的变量保存str.c_str();//转换成char数组, 此时才可用printf输出str.substr(begin, end); //子串str.pop_back(); //删除最后一个字符//字符比较"&gt;" , "&lt;"//字符拼接"+"for(char ch : str) {...} //遍历(不可修改字符)for(char &amp;ch : str){...} //遍历(可修改字符)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:使用+对字符串进行拼接时,要求两边至少有一个string对象, 即str = “a” + “b”; 会报错</p><h2 id="字符串流"><a href="#字符串流" class="headerlink" title="字符串流"></a>字符串流</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;sstream&gt;string s;stringstream ssin(s);while(ssin &gt;&gt; s){....} //按空格拆分s,例如英语句子拆分单词//可用如下代码代替:while(cin &gt;&gt; word) {    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>char数组难点:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char a[] = {'C', '+', '+'};char b[4] = {'D', '+', '+', '\0'};char c[5] = {'E', '+', '+', '\0'};// 最后一个位置会补\0cout &lt;&lt; a &lt;&lt; endl;// 输出"C++D++"，因为字符数组a不会自动添加'\0'，cout会读取到b的部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="循环相克令"><a href="#循环相克令" class="headerlink" title="循环相克令:"></a>循环相克令:</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;string&gt;#include&lt;iostream&gt;#incldue&lt;cstdio&gt;using namespace std;int main(){    string A;    while(getline(cin, A)){        for(int i = 0; i&lt; A.size(); i++){            if(A.find(A[i]) == A.rfind(A[i])){                cout &lt;&lt; A[i] &lt;&lt; endl;                                return 0;            }        }    }    printf("no");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;using namespace std;int alphabet[26];int main() {    string s;    cin &gt;&gt; s;            for(auto i : s){        alphabet[s[i] -'a']++;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求两数的最大值"><a href="#求两数的最大值" class="headerlink" title="求两数的最大值"></a>求两数的最大值</h3><p>max(a, b) = (a+b+abs(a-b))/2;</p><p>数组处理:初始化下标类:用这个方法初始化时有点麻烦,但是后面操作时很方便</p><h3 id="规律题总结"><a href="#规律题总结" class="headerlink" title="规律题总结:"></a>规律题总结:</h3><p>先枚举情况,然后把其中一个变量用未知数表示,其他的类推</p><p>行号 起点,终点</p><p>48:字符’0’</p><h2 id="string中有用的函数"><a href="#string中有用的函数" class="headerlink" title="string中有用的函数:"></a>string中有用的函数:</h2><p>把最后一个字符删掉:s.pop_back();</p><h1 id="766局部性判断-第一类双指针算法"><a href="#766局部性判断-第一类双指针算法" class="headerlink" title="766局部性判断+第一类双指针算法"></a>766局部性判断+第一类双指针算法</h1><h1 id="计算算法时间"><a href="#计算算法时间" class="headerlink" title="计算算法时间:"></a>计算算法时间:</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;ctime&gt;int time = clock();//单位是毫秒````  cout &lt;&lt; clock() - time ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="将带空格的字符串转换成字符串流"><a href="#将带空格的字符串转换成字符串流" class="headerlink" title="将带空格的字符串转换成字符串流"></a>将带空格的字符串转换成字符串流</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;sstream&gt;getline(cin, s);stringstream ssin(s);string a,b, c, d;ssin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>或者用c语言的形式是</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;cstdio&gt;char s[1000];fgets(s, 1000, stdin);int a, b;char str[1000];double c;sscanf(s, "%d%s%d%lf", &amp;a, str, &amp;b, &amp;c);while(~sscanf)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="771-第一类双指针法"><a href="#771-第一类双指针法" class="headerlink" title="771 第一类双指针法"></a>771 第一类双指针法</h1><h1 id="777"><a href="#777" class="headerlink" title="777"></a>777</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main(){    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="静态变量相当于开了一个只有该函数能用的全局变量-而且开在堆里面-不会爆栈"><a href="#静态变量相当于开了一个只有该函数能用的全局变量-而且开在堆里面-不会爆栈" class="headerlink" title="静态变量相当于开了一个只有该函数能用的全局变量,而且开在堆里面,不会爆栈"></a>静态变量相当于开了一个只有该函数能用的全局变量,而且开在堆里面,不会爆栈</h1><h1 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参:"></a>函数传参:</h1><h2 id="二维数组传参时-要把第二个参数带上void-output-int-a-空格-3-或者把两个参数全带上-其他的都不行-扩展-如果是多维数组-只有第一维度的数组可以省略-其他的都不可以"><a href="#二维数组传参时-要把第二个参数带上void-output-int-a-空格-3-或者把两个参数全带上-其他的都不行-扩展-如果是多维数组-只有第一维度的数组可以省略-其他的都不可以" class="headerlink" title="二维数组传参时,要把第二个参数带上void output(int a [空格][ 3]);或者把两个参数全带上,其他的都不行//扩展:如果是多维数组,只有第一维度的数组可以省略,其他的都不可以"></a>二维数组传参时,要把第二个参数带上void output(int a [空格][ 3]);或者把两个参数全带上,其他的都不行//扩展:如果是多维数组,只有第一维度的数组可以省略,其他的都不可以</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void output(int a[][3]);//或a[3][3]或int(*a)[3];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数默认值在后面</p><p>数组指针:int a[10];//sizeof a;返回的是a的长度</p><p>指针数组int a[]; //sizeof a;返回的是指针的长度(64位系统指针长度就是八个字节)</p><p>inline内联函数,只适合调用很短小的,逻辑简单的,递归函数不支持inline</p><h2 id="递归要点"><a href="#递归要点" class="headerlink" title="递归要点:"></a>递归要点:</h2><p>中止递归值,递归的运算函数及其参数拆解成有规律的符号乘以递归函数直到中止递归,然后进行值的返回</p><h1 id="占位参数"><a href="#占位参数" class="headerlink" title="占位参数:"></a>占位参数:</h1><p>//返回值类型  函数名 (数据类型) { }</p><p>//目前阶段的占位参数,我们还用不到,后面课程会用到</p><p>void func(int a, int) {</p><p>}</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>10_1号想点事情</title>
      <link href="/2023/10/01/10-1-hao-xiang-dian-shi-qing/"/>
      <url>/2023/10/01/10-1-hao-xiang-dian-shi-qing/</url>
      
        <content type="html"><![CDATA[<p> 我要好好地把游戏程序员给做好,还得把英语学好</p><p>先想办法赚钱换一台好一点的电脑</p><p>然后攒钱去加拿大留学</p><p>以后尽可能留在加拿大</p><p>有时候想想那些既得利益者的嘴脸真够恶心的,曾经有个那样的女朋友真是不幸,唉,痛苦</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>游戏点子</title>
      <link href="/2023/09/26/you-xi-dian-zi/"/>
      <url>/2023/09/26/you-xi-dian-zi/</url>
      
        <content type="html"><![CDATA[<p> 打破次元壁式:有各种画风的人物混战,依据对手受到的伤害大小来获取积分(一般伤害高的被打时受到的伤害也高),每场积分排名,根据区间设置奖励,有排位制和娱乐制两种</p><p>擂台赛:玩家打擂的形式,决出胜负后可以在随机出现的三种buff中选一种,游戏会对连胜数进行排名,区榜,省榜,国榜.一般又系统自动匹配对手,但是若</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构习题集</title>
      <link href="/2023/09/23/shu-ju-jie-gou-xi-ti-ji/"/>
      <url>/2023/09/23/shu-ju-jie-gou-xi-ti-ji/</url>
      
        <content type="html"><![CDATA[<p>​司马习题集</p><h3 id="链表合并-排序"><a href="#链表合并-排序" class="headerlink" title="链表合并+排序"></a>链表合并+排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> grade<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span>node<span class="token operator">*</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">*</span> temph <span class="token operator">=</span> head<span class="token punctuation">;</span>    node<span class="token operator">*</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token operator">-&gt;</span>num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token operator">-&gt;</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        temph<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>        temph <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token operator">*</span> <span class="token function">mergList</span><span class="token punctuation">(</span>node<span class="token operator">*</span> a<span class="token punctuation">,</span> node<span class="token operator">*</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token operator">*</span> tempa <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tempa<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempa <span class="token operator">=</span> tempa<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tempa<span class="token operator">-&gt;</span>next <span class="token operator">=</span> b<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    node<span class="token operator">*</span> tempb <span class="token operator">=</span> b<span class="token punctuation">;</span>    node<span class="token operator">*</span> temp<span class="token punctuation">;</span>    node<span class="token operator">*</span> nmin<span class="token punctuation">;</span>    <span class="token keyword">int</span> imin<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> all<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nmin <span class="token operator">=</span> a<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        imin <span class="token operator">=</span> a<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>num<span class="token punctuation">;</span>        temp <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>num <span class="token operator">&lt;</span> imin<span class="token punctuation">)</span> <span class="token punctuation">{</span>                imin <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>num<span class="token punctuation">;</span>                nmin <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        tempb<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>        tempb <span class="token operator">=</span> tempb<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    node <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>ab<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ab <span class="token operator">=</span> <span class="token function">mergList</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token operator">+</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ab <span class="token operator">=</span> ab<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> ab<span class="token operator">-&gt;</span>num<span class="token punctuation">,</span> ab<span class="token operator">-&gt;</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双向链表设计"><a href="#双向链表设计" class="headerlink" title="双向链表设计"></a>双向链表设计</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">line<span class="token operator">*</span> <span class="token function">initLine</span><span class="token punctuation">(</span>line<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> input_data<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入创建结点的大小\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//边界条件考虑</span>    <span class="token punctuation">}</span>    <span class="token comment">//头结点创建</span>    head <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入第%d个数据\n"</span><span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>data <span class="token operator">=</span> input_data<span class="token punctuation">;</span>        line<span class="token operator">*</span> list <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;=</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        line<span class="token operator">*</span> body <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        body<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个数据\n"</span><span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token operator">-&gt;</span>data <span class="token operator">=</span> input_data<span class="token punctuation">;</span>                list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> body<span class="token punctuation">;</span>        body<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> list<span class="token punctuation">;</span>        list <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双向链表插入数据"><a href="#双向链表插入数据" class="headerlink" title="双向链表插入数据"></a>双向链表插入数据</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">line<span class="token operator">*</span> <span class="token function">insertLine</span><span class="token punctuation">(</span>line<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//三个参数分别为:进行此操作的双链表,插入数据,插入位置</span>    <span class="token comment">//新建数据域data的结点</span>    line<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>enxt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//插入到链表头,要特殊考虑</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>add <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>        head <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        line<span class="token operator">*</span> body <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//找到要插入位置的前一个结点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>add<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            body <span class="token operator">=</span> body<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            body<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            body<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> body<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            body<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双向链表实现贪吃蛇"><a href="#双向链表实现贪吃蛇" class="headerlink" title="双向链表实现贪吃蛇"></a>双向链表实现贪吃蛇</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SnakeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token comment">//记录结点所在的行和列</span>    <span class="token keyword">struct</span> <span class="token class-name">SnakeNode</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">SnakeNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token punctuation">}</span>Node<span class="token punctuation">,</span> <span class="token operator">*</span>pNode<span class="token punctuation">;</span><span class="token comment">//贪吃蛇移动过程,即链表所有结点从尾结点开始依次遍历到头结点向前移动一个位置</span>bool <span class="token function">Move</span><span class="token punctuation">(</span>pNode pHead<span class="token punctuation">,</span> <span class="token keyword">char</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bool game_over <span class="token operator">=</span> false<span class="token punctuation">;</span>    pNode pt <span class="token operator">=</span> pTail<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环链表-单链表"><a href="#循环链表-单链表" class="headerlink" title="循环链表(单链表)"></a>循环链表(单链表)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化结点</span>list <span class="token operator">*</span><span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    list <span class="token operator">*</span> head <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建失败,退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主函数中这样调用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">list<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>循环链表的创建操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">insert_list</span><span class="token punctuation">(</span>list<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要插入的元素:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token operator">*</span> p<span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//找到最后一个数据</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token operator">!=</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈的设计"><a href="#栈的设计" class="headerlink" title="栈的设计"></a>栈的设计</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//栈的结点设计</span><span class="token comment">//单个结点设计,数据和下一个指针</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token comment">//利用上面的结点创建栈,分别为指向头结点的top指针和计数用的count指针</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">stack</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> top<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span>Link_Stack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>入栈操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Link_Stack <span class="token operator">*</span><span class="token function">Push_stack</span><span class="token punctuation">(</span>Link_Stack <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//temp = new Node;</span>    temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> elem<span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>top <span class="token operator">=</span> temp<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈-的基本操作"><a href="#栈-的基本操作" class="headerlink" title="栈 的基本操作"></a>栈 的基本操作</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//遍历栈,输出所有元素</span><span class="token keyword">int</span> <span class="token function">show_stack</span><span class="token punctuation">(</span>Link_Stack <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">*</span>temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误:栈为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速栈实现–数组栈"><a href="#快速栈实现–数组栈" class="headerlink" title="快速栈实现–数组栈"></a>快速栈实现–数组栈</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">10000</span></span></span><span class="token comment">//结点设计</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">stack</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span>stack<span class="token punctuation">;</span><span class="token comment">//创建</span>stack <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>stack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分配内存空间失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//栈的top和bottom均为0</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//入栈push</span><span class="token keyword">void</span> <span class="token function">push</span> <span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//出栈pop</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        s<span class="token operator">-&gt;</span>top<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//模拟打印栈中元素</span><span class="token keyword">void</span> <span class="token function">print_stack</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token operator">-&gt;</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//习惯性换行</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//结点定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token comment">//队列定义, 队首指针和队尾指针</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">queue</span> <span class="token punctuation">{</span>    node <span class="token operator">*</span>front<span class="token punctuation">;</span><span class="token comment">//头指针</span>    node <span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token comment">//尾指针</span><span class="token punctuation">}</span>queue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化结点</span>node<span class="token operator">*</span> <span class="token function">init_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token operator">*</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//初始化队列</span>queue<span class="token operator">*</span> <span class="token function">init_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    queue<span class="token operator">*</span> q <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//建立失败,退出</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//头尾结点均赋值NULL</span>    q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断队列是否为空</p><p>判断队列头指针是否为空值即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接用返回值进行更简单的判断(两者效果完全一样)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    node<span class="token operator">*</span> n <span class="token operator">=</span> <span class="token function">init_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    n<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> n<span class="token punctuation">;</span>        q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        q<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>        q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h3><p>要在队列不为空的情况下进行操作(判空处理), 如果队列只有一个元素时要对头尾两个指针制空,并释放这个结点即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    node<span class="token operator">*</span> n <span class="token operator">=</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">printf_queue</span><span class="token punctuation">(</span>queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    node<span class="token operator">*</span> n <span class="token punctuation">;</span>    n <span class="token operator">=</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> n<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> n<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算队列中含有多少元素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">calac</span><span class="token punctuation">(</span>queue<span class="token operator">*</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>    node<span class="token operator">*</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n <span class="token operator">=</span> n<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxsize</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">cir_queue</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span><span class="token punctuation">}</span>cir_queue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//入队操作</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>cir_queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>maxsize <span class="token operator">==</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"溢出,无法入队\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>maxsize<span class="token punctuation">;</span>        q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//出队操作</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>cir_queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>rear <span class="token operator">==</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列为空, 无法出队\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>maxsize<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历循环队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>cir_queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>maxsize<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector<容器>"></a>Vector&lt;容器&gt;</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;vector&gt;//格式为vector&lt;Data_Types&gt; name;vector&lt;int&gt; v1; // 创建一个空向量v1vector&lt;int&gt; v2(10);vector&lt;int&gt; v3(10, 5);vector&lt;int&gt; v4(v3.begin(), v3.end());vector&lt;int&gt; v5(v4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>遍历</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v;vector&lt;int&gt;::iterator it;for(it = v.begin(); it!=v.end();it++){    cout &lt;&lt; *it &lt;&lt;' ';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通遍历:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 0; i&lt;v.size(); i++){    cout &lt;&lt; v[i] &lt;&lt;' ';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h3><p>a)在向量尾添加新元素,并自动让容器大小增加一个</p><p>函数原型:</p><p>void push_back(const value_type&amp; val);</p><pre class="line-numbers language-none"><code class="language-none">v.push_back(10);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除向量尾的最后一个,并将容器大小减一个</p><p>原型:void pop_back();</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">k</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">inert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">v.erase(v.begin());v.erase(v.begin(), v.begin()+4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="将向量中所有元素清空"><a href="#将向量中所有元素清空" class="headerlink" title="将向量中所有元素清空"></a>将向量中所有元素清空</h3><pre class="line-numbers language-c+" data-language="c+"><code class="language-c+">v.clear();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数据元素个数"><a href="#数据元素个数" class="headerlink" title="数据元素个数"></a>数据元素个数</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="已开辟最大宽度capacity"><a href="#已开辟最大宽度capacity" class="headerlink" title="已开辟最大宽度capacity()"></a>已开辟最大宽度capacity()</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>begin<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最大支持空间max-size"><a href="#最大支持空间max-size" class="headerlink" title="最大支持空间max_size()"></a>最大支持空间max_size()</h3><p>size_type max_size() const</p><pre class="line-numbers language-none"><code class="language-none">vector&lt;int&gt; v(5, 10);cout &lt;&lt; v.max_size() &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="List容器"><a href="#List容器" class="headerlink" title="List容器"></a>List容器</h1><h3 id="头文件-include"><a href="#头文件-include" class="headerlink" title="头文件#include"></a>头文件#include<list></list></h3><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>explict list (const allocator_type&amp; alloc = allocator = allocator_type());</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> l1<span class="token punctuation">;</span> <span class="token comment">// 创建一个空链表</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个有十个空元素的链表</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个有五个元素为20的链表</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l4</span><span class="token punctuation">(</span>l3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个内容为l3的链表</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l5</span><span class="token punctuation">(</span>l4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个内容为l4的链表,效果同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">lits&lt;int&gt; li;for(list&lt;int&gt;::iterator it=li.begin(); it!=li.end(); it++){    cout &lt;&lt; *it &lt;&lt;' ';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用接口-1"><a href="#常用接口-1" class="headerlink" title="常用接口"></a>常用接口</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//判断链表是否为空,空为真,不空为假bool empty() const;if(li.empty()){    cout &lt;&lt; "is empty()" &lt;&lt; endl;}else {    cout &lt;&lt; "not empty()" &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//获取链表元素的个数函数原型:size_type size() const;cout &lt;&lt; li.size() &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//链表前插入push_front() &amp;&amp; 删除pop_front()push_front()表示在链表最前端插入一个元素,pop_front()表示在链表最前端删除一个元素函数原型    void push_front(const value_type&amp; val);void pop_front;li.push_front(10);li.pop_front();//链表后插入push_back() &amp;&amp; 删除pop_back()push_back()表示在链表尾插入一个数据,pop_back()表示将链表尾删除一个数据    函数原型:void push_back(const value_type&amp; val);void pop_back();li.push_back(10);li.pop_back();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入insert()</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">li<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>li<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">k</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>li<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除一个或一个区间的元素,自动缩减空间使用</p><p>函数原型:</p><p>li.erase(li.begin());删除第一个元素</p><p>li.erase(li.begin(), li.begin()+4);删除前四个元素</p><h3 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort()"></a>排序sort()</h3><p>将整个链表变成升序状态,或者变成自定义的排序状态</p><p>函数原型:</p><p>void sort()</p><p>template<class compare=""> void sort(Compare comp)</class></p><p>举例子:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> li<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        li<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    li<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    li<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">li2</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator it <span class="token operator">=</span> li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>li<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//排序前3 10 9 8 7 6 20</span>    li<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//排序后:</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator it <span class="token operator">=</span> li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>li<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        li2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator it <span class="token operator">=</span> li2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>li2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//自定义降序排序</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逆序reverse"><a href="#逆序reverse" class="headerlink" title="逆序reverse()"></a>逆序reverse()</h3><p>stl默认降序方法reverse(), 类似于sort一样直接使用即可</p><p>void reverse()</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">li<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="stack栈容器"><a href="#stack栈容器" class="headerlink" title="stack栈容器"></a>stack栈容器</h1><p>头文件:</p><p>#include<stack></stack></p><p>初始化:</p><p>explicit stack(const container_type&amp; ctnr = container_type());</p><p>以int类型进行创建,其方式与vector无异</p><p>stack<int> s;</int></p><p>stack<int> v(s);</int></p><p>标准栈的创建方式是直接创建空栈, ,由于栈的特殊性质,让他拥有其他容器的参数可以这样创建,这种多参数的方式可能有些复杂,一般也很少这样使用</p><p>vector<int> v(3, 100);</int></p><p>stack&lt;int, vector<int> &gt; s(v);</int></p><p>通过标准的方式创建向量数组,然后通过复制构造函数 的方式进行创建,其内容就是vector数组的全部内容</p><h3 id="迭代器-2"><a href="#迭代器-2" class="headerlink" title="迭代器"></a>迭代器</h3><p>栈和队列都属于一种特殊的数据结构, 只能通过访问顶层数据并不断剔除数据的方式进行全部访问,因此没有直接 的迭代器</p><h2 id="使用栈-的方式实现斐波那契数列"><a href="#使用栈-的方式实现斐波那契数列" class="headerlink" title="使用栈 的方式实现斐波那契数列"></a>使用栈 的方式实现斐波那契数列</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct node{    int value;    int dir;};int StackFib(int n){    node w;    stack&lt;node&gt; s;    int sum = 0;        while(1)    {        while(1){            w.value = n;            w.dir = 1;            s.push(w);            n--;            if(n&lt;0)                break;        }        while(!s.empty())        {            w=s.top();            s.pop();            if(w.value == 0)                sum += 0;            else if(w.value == 1)                sum+=1;            else if(w.value != 0 &amp;&amp; w.value != 1 &amp;&amp; w.dir == 1)            {                w.dir =  2;                s.push(w);                n = w.value-2;                break;            }        }        if(s.empty())            break;    }    return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;queue&gt;//初始化explict queue (const container_type&amp; ctnr = container_type());以int类型作为参数为例进行创建queue&lt;int&gt; q;queue&lt;int&gt; qoo(q);vector&lt;int&gt; v(3, 100);queue&lt;int, vector&lt;int&gt; &gt; s(v);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用接口:</p><p>a)大小size()</p><p>返回队列元素的个数</p><p>size_type size() const</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; q.size() &lt;&lt; endl;//直接返回队列元素个数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><pre class="line-numbers language-none"><code class="language-none">void push(const value_type&amp; val)q.push(100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="出队pop"><a href="#出队pop" class="headerlink" title="出队pop()"></a>出队pop()</h3><p>void pop()</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">q.pop();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问队头元素front"><a href="#访问队头元素front" class="headerlink" title="访问队头元素front()"></a>访问队头元素front()</h3><p>value_type&amp; front();</p><p>const value_type&amp; front() const;</p><pre class="line-numbers language-none"><code class="language-none">q.front()+= 500;//对队头元素进行修改cout &lt;&lt; q.front() &lt;&lt; endl;//直接输出内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="访问队尾元素back"><a href="#访问队尾元素back" class="headerlink" title="访问队尾元素back()"></a>访问队尾元素back()</h3><p>value_type&amp; back();</p><p>const value_type&amp; back() const;</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">q.back() += 500;cout &lt;&lt; q.back() &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="判空操作empty"><a href="#判空操作empty" class="headerlink" title="判空操作empty()"></a>判空操作empty()</h3><p>bool empty() const;//空为真,非空为假</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while(q.empty()){    cout &lt;&lt; q.front &lt;&lt; endl;    q.pop();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;queue&gt;#include&lt;iostream&gt;using namespace std;int main{    int n;    scanf("%d" , &amp;n);    queue&lt;int&gt; q;    int sum = 0;    for(int i = 0; i &lt; n;i++){        int s;        scanf("%d", &amp;s);        if(s == 1){            int num;            scanf("%d", &amp;num);            q.push(num);            sum++;        }else if(s == 2){            if(q.empty()){                printf("no");                return 0;            }else {                printf("%d\n", q.front());                sum--;                q.pop();            }        }else if(s == 3){            printf("%d\n", sum);        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct cmp{//这个比较要用结构体来表示    bool operator()(int &amp;a, int &amp;b) const    {        return a &gt; b;    }};priority_queue&lt;int, vector&lt;int&gt;, cmp&gt; q;//自定义比较方法priority_queue&lt;int&gt; pq;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用接口-2"><a href="#常用接口-2" class="headerlink" title="常用接口"></a>常用接口</h3><p>大小size()</p><p>原型 size_type size() const;</p><p>cout &lt;&lt; q.size() &lt;&lt; endl;//直接返回队列中的元素</p><h3 id="入队push"><a href="#入队push" class="headerlink" title="入队push()"></a>入队push()</h3><p>函数原型: void push(const value_type&amp; val);</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">q.push(100);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="出队pop-1"><a href="#出队pop-1" class="headerlink" title="出队pop()"></a>出队pop()</h3><p>void pop()</p><p>q.pop();</p><h3 id="访问队头元素top"><a href="#访问队头元素top" class="headerlink" title="访问队头元素top()"></a>访问队头元素top()</h3><p>与标准队列不同,优先队列只允许访问队头元素</p><p>原型:</p><p>reference&amp; top();</p><p>const_reference&amp; top() const;</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; q.top() &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="判空empty-同前"><a href="#判空empty-同前" class="headerlink" title="判空empty(),同前"></a>判空empty(),同前</h3><h1 id="set容器"><a href="#set容器" class="headerlink" title="set容器"></a>set容器</h1><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件:"></a>头文件:</h3><p>#include<set></set></p><p>初始化:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt; class T, class Compare = less&lt;T&gt;, class Alloc = allocator&lt;T&gt; &gt; class set;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个是值, 第二个是比较器,用于比较内容, 默认为less<key>即降序, 负责内存的分配和销毁</key></p><p>实际使用中,仅仅为其分配值就足以满足大部分需求</p><h3 id="迭代器-3"><a href="#迭代器-3" class="headerlink" title="迭代器"></a>迭代器</h3><p>c98标准</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(set&lt;int&gt;::iterator it = s.begin(); it!=s.end(); ++it)    cout &lt;&lt; *it &lt;&lt; ' ';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>c11标准</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(auto it = s.cbegin(); it!= s.cend(); ++it)    cout &lt;&lt; *it &lt;&lt; ' ';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常用接口:</p><p>大小size()</p><p>size_type size() const;</p><p>cout &lt;&lt; s.size() &lt;&lt; endl;//直接返回元素个数\</p><h3 id="插入元素insert"><a href="#插入元素insert" class="headerlink" title="插入元素insert()"></a>插入元素insert()</h3><p>pair&lt;ierator, bool&gt; insert(const value_type&amp; val);</p><p>s.inert(i);</p><h3 id="删除元素erase"><a href="#删除元素erase" class="headerlink" title="删除元素erase()"></a>删除元素erase()</h3><p>删除一个元素,或者一个区间的元素,将会自动缩减空间使用</p><p>iterator erase (iterator position);</p><p>iterator erase (iterator first, iterator last);</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s.erase(s.begin()); //使用迭代器的方法删除第一个元素s.erase(s.begin(), s.end());//删除一段内容.这里是全部删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>清空元素 clear()</p><p>清空元素但是占用最大内存空间还是不会改变的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s.clear();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p>函数原型:</p><p>iterator find(const value_type&amp; val)const;</p><p>cout &lt;&lt; *s.find(4) &lt;&lt; endl;</p><p>s.erase(s.find(4));</p><h3 id="算法头文件"><a href="#算法头文件" class="headerlink" title="算法头文件:"></a>算法头文件:</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int main(){    int a[6] = {1, 5, 9, 4, 6, 3};    sort(a, a+6);    for(int i=0;i&lt;6 ;i++){        cout &lt;&lt; a[i] &lt;&lt; ' ';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合论和stl集合"><a href="#集合论和stl集合" class="headerlink" title="集合论和stl集合"></a>集合论和stl集合</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;set&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;int main(){    set&lt;int&gt; a, b;    vector&lt;int&gt; c;    a.insert(2);    a.insert(4);    a.insert(6);        b.insert(1);    b.insert(2);    b.insert(3);    b.insert(4);    b.insert(5);    b.insert(6);            set_union(a.begin(), a.end(), b.begin, b.end(), back_inserter(c));    for(vector&lt;int&gt;::iterator it = c.begin(); it!=c.end(); it++){        cout &lt;&lt; *it &lt;&lt; ' ';    }    cout &lt;&lt; endl;    c.clearl                set_intersection(a.begin(), a.end(), b.begin(), back_insertser(c));    for(vector&lt;int&gt;::iterator it = c.begin(); it!=c.end(); it++){        cout &lt;&lt; *it &lt;&lt; ' ';    }    cout &lt;&lt; endl;    c.clear;                set_difference(a.begin(), a.end(), b.begin(), back_insertser(c));    for(vector&lt;int&gt;::iterator it = c.begin(); it!=c.end(); it++){        cout &lt;&lt; *it &lt;&lt; ' ';    }    cout &lt;&lt; endl;    c.clear;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构c/cpp</title>
      <link href="/2023/09/22/shu-ju-jie-gou-c-cpp/"/>
      <url>/2023/09/22/shu-ju-jie-gou-c-cpp/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>除上文提到的两个函数外，在C<span class="token operator">++</span>中引入的对象思维，有一个极其类似于malloc函数的方法，就是new方法，但他们还是有一些区别的：new操作符从自由存储区（free store）上为对象动态分配内存空间，而malloc函数从堆上动态分配内存。自由存储区是C<span class="token operator">++</span>基于new操作符的一个抽象概念，凡是通过new操作符进行内存申请，该内存即为自由存储区。而堆是操作系统中的术语，是操作系统所维护的一块特殊内存，用于程序的内存动态分配，C语言使用malloc从堆上分配内存，使用free释放已分配的对应内存。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">LinkedList LinkedListCreateH() {    Node *L;    L = (Node *)malloc(sizeof(Node));    L-&gt;next = NULL;        int x;    while(scanf("%d", &amp;x) != EOF) {        Node *p;        p = (Node*)malloc(sizeof(Node));        p-&gt;data = x;        p-&gt;next = L-&gt;next;        L-&gt;next = p;    }    return L;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkedList <span class="token function">LinkedListCreatT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请头结点空间</span>    L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node <span class="token operator">*</span>p<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请新的结点</span>        p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>        r<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    r<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp高级函数特性</title>
      <link href="/2023/09/20/cpp-gao-ji-han-shu-te-xing/"/>
      <url>/2023/09/20/cpp-gao-ji-han-shu-te-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="c-初始化"><a href="#c-初始化" class="headerlink" title="c++初始化"></a>c++初始化</h3><p>c++ 初始化 的花括号{}初始化方式为列表初始化</p><p>较为严格:初始化时不允许信息的丢失</p><h3 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h3><p>const int p = 9;</p><p>常量表达式是编译时确定的</p><h3 id="constexpr-关键字"><a href="#constexpr-关键字" class="headerlink" title="constexpr 关键字"></a>constexpr 关键字</h3><h3 id="四种细分显示转化语法"><a href="#四种细分显示转化语法" class="headerlink" title="四种细分显示转化语法"></a>四种细分显示转化语法</h3><p>static_cast </p><p>dynamic_cast</p><p>const_cast</p><p>reinterpret_cast</p><p>简单的io流控制</p><p>dec</p><p>hex oct ws endl setprecision(int) setw(int) </p><h3 id="for-声明-表达式"><a href="#for-声明-表达式" class="headerlink" title="for(声明, 表达式)"></a>for(声明, 表达式)</h3><p>如果进行写操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s = "abcd";for(auto &amp;r: s) r+=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>返回引用的函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream.h&gt;int a[] = {232,434,34,34};int&amp; index(int i);void main() {    index(3) = 16;    cout &lt;&lt; "index(3) is :" &lt;&lt; index(3) &lt;&lt; endl;    cout &lt;&lt; "   a[3] is :" &lt;&lt; a[3] &lt;&lt; endl;}int&amp; index(int i){    return a[i];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数可以定义默认形参值"><a href="#函数可以定义默认形参值" class="headerlink" title="函数可以定义默认形参值"></a>函数可以定义默认形参值</h3><h3 id="typedef-using"><a href="#typedef-using" class="headerlink" title="typedef           using"></a>typedef           using</h3><h3 id="auto类型与decltype类型"><a href="#auto类型与decltype类型" class="headerlink" title="auto类型与decltype类型"></a>auto类型与decltype类型</h3><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Class Location{private:    int X, Y;public:    void initial(int initX, int initY);    int GetX();    int GetY();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;ctime&gt;#incldue&lt;cstdlib&gt;#incldue&lt;iostream&gt;using namespace std;int main(){    srand(time(NULL));    int lucky = rand()%10;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c-使用控制符指定书写格式"><a href="#c-使用控制符指定书写格式" class="headerlink" title="c++使用控制符指定书写格式"></a>c++使用控制符指定书写格式</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iomanip&gt;#include&lt;iostream&gt;using namespace std;int main(){    cout &lt;&lt; oct &lt;&lt; 1234 &lt;&lt; '\n';//八进制数    cout &lt;&lt; dec &lt;&lt; 1234 &lt;&lt; '\n';//十进制数    cout &lt;&lt; hex &lt;&lt; 1234 &lt;&lt; '\n';//十六进制数        cout &lt;&lt; showbase;//显示基数    cout &lt;&lt; oct &lt;&lt; 1234 &lt;&lt; '\n';//八进制数    cout &lt;&lt; dec &lt;&lt; 1234 &lt;&lt; '\n';//十进制数    cout &lt;&lt; hex &lt;&lt; 1234 &lt;&lt; '\n';//十六进制数        cout &lt;&lt; setw(10) &lt;&lt; internal &lt;&lt; "abc\n";    cout &lt;&lt; setw(10) &lt;&lt; left &lt;&lt; "abc\n";    cout &lt;&lt; setw(10) &lt;&lt; right &lt;&lt; "abc\n";        cout &lt;&lt; setbase(10);    cout &lt;&lt; setw(10) &lt;&lt; internal &lt;&lt; -123 &lt;&lt; '\n';    cout &lt;&lt; setw(10) &lt;&lt; left &lt;&lt; -123 &lt;&lt; '\n';    cout &lt;&lt; setw(10) &lt;&lt; right &lt;&lt; -123 &lt;&lt; '\n';        cout &lt;&lt; setfill('*');    cout &lt;&lt; setw(10) &lt;&lt; internal &lt;&lt; -123 &lt;&lt; '\n';    cout &lt;&lt; setw(10) &lt;&lt; left &lt;&lt; -123 &lt;&lt; '\n';    cout &lt;&lt; setw(10) &lt;&lt; right &lt;&lt; -123 &lt;&lt; '\n';        cout &lt;&lt; setfill(' ');        cout &lt;&lt; fixed &lt;&lt; setw(10) &lt;&lt; setprecision(2) &lt;&lt; 123.5 &lt;&lt; endl;    cout &lt;&lt; scientific &lt;&lt; setw(10) &lt;&lt; setprecision(2) &lt;&lt; 123.5 &lt;&lt; endl;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class-template-模板-介绍"><a href="#class-template-模板-介绍" class="headerlink" title="class template (模板)介绍"></a>class template (模板)介绍</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt;class complex{public:complex(T r = 0, T i = 0)        : re(r), im(i)    {}    complex&amp; operator += (const complex&amp;);    T real () const{ return re;}    T imag () const{ return im;}private:    re, im;    friend complex&amp; _doapl(complex*, const complex&amp;);    };{    complex&lt;double&gt; c1(2.5, 1.5);    complex&lt;int&gt; c2(2, 1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class complex{public:complex (double r = 0, double i=0)        : re(r), im(i)    {}    complex&amp; operator += {const complex&amp;};    double real () const {return re;}    double imag () const {return im;} }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>constructor(构造函数)</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class complex{    public:    complex (double r = 0, double i = 0/*默认参数*/)        : re(r), im(i)//初始列,初值列}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>const member functions</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">classs complex{public:    complex (double r = 0, double i = 0)        : re(r) , im(r)        {}    complex&amp; operator += (const complex&amp;);    double real () const {return re;}    double imag () const {return im;}private:    double re, im;    frie}{    complex c1(2,1);    cout &lt;&lt; c1.real();    cout &lt;&lt; c1.imag();}{    const complex c1(2,1);    cout &lt;&lt; c1.real();    cout &lt;&lt; c1.imag();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数可以放在private区</p><p>单例模式singleton</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A{    public:    static A&amp; getInstance();    setup(){ ...}    private:    A();    A(const A&amp; rhs);    };A&amp; A::getInstance(){    static A a;    return a;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>pass by value vs. pass by reference(to const)</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class complex{public:    complex (double r = 0, double i = 0)        : re(r), im{i}    {}    complex&amp; operator += {const complex&amp;};    double real () const {return re;}    double imag () const {return im;}private:    double re, im;    friend complex&amp; _doapl (complex*, const complex&amp;);};{    complex c1(2, 1);    complex c2;    c2+= c1;    cout &lt;&lt; c2;}ostream&amp;operator &lt;&lt; (ostream&amp; os, const complex&amp; x){    retunn os &lt;&lt;'()' &lt;&lt; real(x) &lt;&lt;',' &lt;&lt; imag(x) &lt;&lt;')';    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>都尽量引用传递</p><h3 id="友元-P4-25分"><a href="#友元-P4-25分" class="headerlink" title="友元(P4 -25分)"></a>友元(P4 -25分)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class complex{public:    complex (double r = 0, double i = 0)        : re(r), im{i}    {}    complex&amp; operator += {const complex&amp;};    double real () const {return re;}    double imag () const {return im;}private:    double re, im;    friend complex&amp; _doapl (complex*, const complex&amp;);};inline complex&amp;_doapl (complex* ths, const complex&amp; r){    rhs-&gt;re += r.re;    ths-&gt;im += r.im;    return *ths;}//自由取得friend的private成员<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相同class的各种objects互为friends-友元"><a href="#相同class的各种objects互为friends-友元" class="headerlink" title="相同class的各种objects互为friends(友元)"></a>相同class的各种objects互为friends(友元)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class complex{    public:    complex(double r = 0, double i= 0)        : re(r), im(i)        {}    int func(const complex&amp; param)    {        return paraml.re+ param.im;    }    private:    double re, im;};{    complex c1(2, 1);    complex c2;    c2.func(c1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作符重载-成员函数版-P5"><a href="#操作符重载-成员函数版-P5" class="headerlink" title="操作符重载-成员函数版(P5)"></a>操作符重载-成员函数版(P5)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">inline</span> complex<span class="token operator">&amp;</span><span class="token function">_doapl</span><span class="token punctuation">(</span>complex<span class="token operator">*</span> ths<span class="token punctuation">,</span> <span class="token keyword">const</span> complex<span class="token operator">&amp;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    ths<span class="token operator">-&gt;</span>re <span class="token operator">+=</span> r<span class="token punctuation">.</span>re<span class="token punctuation">;</span>    ths<span class="token operator">-&gt;</span>im <span class="token operator">+=</span> r<span class="token punctuation">.</span>im<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>ths<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> complex<span class="token operator">&amp;</span> complex<span class="token operator">::</span>operator <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> complex<span class="token operator">&amp;</span> r<span class="token punctuation">)</span><span class="token comment">//含有隐藏参数this</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_doapl</span> <span class="token punctuation">(</span>this<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    complex <span class="token function">c1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    complex <span class="token function">c2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c2 <span class="token operator">+=</span> c1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="return-by-reference语法分析"><a href="#return-by-reference语法分析" class="headerlink" title="return  by reference语法分析"></a>return  by reference语法分析</h3><p>传递者无需知道接收者是以reference形式接收</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline complex&amp;_doapl(complex* ths, const complex&amp; r){    ,,,    return *ths;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作符重载-非成员函数"><a href="#操作符重载-非成员函数" class="headerlink" title="操作符重载-非成员函数"></a>操作符重载-非成员函数</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">{    complex c1(2, 1);    complex c2;    c2 = c1+ c2;    c2 = c1 + 5;    c2 = 7 + c1;}//为了对付client的三种可能用法,这儿对应开发三个函数, 下面这些函数绝不可return by reference, 因为, 它们返回的必定是个local objectinline complexoperator + (const complex&amp; x, const complex&amp; y){    return complex (real (x) + real(y), imag (x) + imag(y));}inline complexoperator + (const complex&amp; x, double y){    return complex (real(x)+y, imag(x));}inline complexoperator + (double x, const complex&amp; y){    return complex (x + real(y), imag (y));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="临时对象temp-object-typename"><a href="#临时对象temp-object-typename" class="headerlink" title="临时对象temp object      typename()"></a>临时对象temp object      typename()</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline complexoperator + (const complex&amp; x){    return x;}//这个可以return by referenceinline complexoperator - (const complex&amp; x){    return complex (-real(x), -imag(x));}//这个函数绝不可能return by reference,因为其返回的必定是个local object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline booloperator == (const complex&amp; x, const complex&amp; y){    return real(x) == real(y) &amp;&amp; imag(x) == imag(y);}inline booloperator == (const complex&amp; x, double y){    return real(x) == y &amp;&amp; imag(x) == 0;}inline booloperator == (double x, const complex&amp; y){    return x== real(y) &amp;&amp; imag(y) == 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">{    complex c1(2, 1);    cout &lt;&lt; conj(c1);    cout &lt;&lt; c1 &lt;&lt; conj(c1);}inline complex conj(const complex&amp; x){ return complex(real(x), -imag(x));   }#include&lt;iostream.h&gt;ostream&amp;operator &lt;&lt; (ostream&amp; os, const complex&amp; x){    return os &lt;&lt; '(' &lt;&lt; real(x) &lt;&lt;',' &lt;&lt; imag(x) &lt;&lt;')';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c-map容器"><a href="#c-map容器" class="headerlink" title="c++map容器"></a>c++map容器</h3><p>底层会将元素自动排序</p><p>#include<map></map></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt; class Key, class T, class Compare = less&lt;Key&gt;, class Alloc = allocator&lt;pair&lt;const Key,T&gt; &gt; &gt; class map; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>map&lt;char, int&gt; s</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(map&lt;char, int&gt;::ierator it = s.begin(); it != s.end();it++){    cout &lt;&lt; it-&gt;first &lt;&lt; "---" &lt;&lt;it-&gt;second &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h3><p>map&lt;char, int&gt; s 创建了一个map ,命名为s</p><h3 id="大小size"><a href="#大小size" class="headerlink" title="大小size()"></a>大小size()</h3><p>size_type size() const;</p><p>cout &lt;&lt; s.size() &lt;&lt; endl;</p><h3 id="插入元素insert"><a href="#插入元素insert" class="headerlink" title="插入元素insert()"></a>插入元素insert()</h3><p> 函数原型: single element</p><p>pair&lt;iterator, bool&gt; insert (const value_type&amp; val);</p><p>template <class p=""> pair&lt;iterator, bool&gt; insert (p&amp;&amp; val);</class></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s.inert(pair&lt;char, int&gt;('d', 4));//这里的pair表示一对的关系,相当于struct pair{char a; int b}的一对数据,在接下来会详细学pair的用法//或者用下面的这种方法s['d'] = 4; //这与上面的效果是一样的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除元素erase"><a href="#删除元素erase" class="headerlink" title="删除元素erase()"></a>删除元素erase()</h3><p>删除一个元素,或者一段区间的元素,自动缩减空间使用</p><p>函数原型:</p><p>iterator erase (iterator position);</p><p>iterator erase (iterator first, iterator last);</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s.erase(s.begin());s.erase(s.begin(), s.end());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="清空元素"><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h3><p>s.clear()</p><h3 id="查找元素-find"><a href="#查找元素-find" class="headerlink" title="查找元素 find()"></a>查找元素 find()</h3><p>函数原型: iterator find (const value_type&amp; val) const;</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; s.find('d') -&gt; second &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者实现找到的删除指定元素</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">s.erase(s.find('d'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="pair类模板"><a href="#pair类模板" class="headerlink" title="pair类模板"></a>pair类模板</h1><p>相关头文件</p><p>#include<utility></utility></p><p>但是笔者亲测在编译器可以不声明这个头文件而直接使用，貌似在C++中，pair被放入了std命名空间中了。</p><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><p>template &lt;class T1, class T2&gt; struct pair;</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pair&lt;int, int&gt; p;pair&lt;int, int&gt; p(10, 20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">map&lt;char, int&gt; m;m.insert(pair&lt;char, int&gt;('a', 10));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pair&lt;int, int&gt; p(10, 20);cout &lt;&lt; p.first &lt;&lt; " " &lt;&lt; p.second&lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>make_pair</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pair&lt;int int&gt; p;p.first = 10;p.second = 20;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pair&lt;int, int&gt; p;p = make_pair(10, 20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="函数返回多值"><a href="#函数返回多值" class="headerlink" title="函数返回多值"></a>函数返回多值</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;utility&gt;using namespace std;pair&lt;string, int&gt; getClass(int id) {    return make_pair("DOTCPP!", id);}int main(int argc, char **argv) {    pair&lt;string, int&gt; a;    a= getClass(10);    cout &lt;&lt; a.first &lt;&lt; " " &lt;&lt; a.second  &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><h3 id="双返回值-pair"><a href="#双返回值-pair" class="headerlink" title="双返回值 pair"></a>双返回值 pair</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pair&lt;string, int&gt; getClass(int id){    return make_pair("DOTCPP!", id);}int main(int argc, char **argv) {    pair&lt;string, int&gt; a;    a = getClass(10);    cout &lt;&lt; a.first &lt;&lt; " " &lt;&lt; a.second &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="c-加快输入效率"><a href="#c-加快输入效率" class="headerlink" title="c++加快输入效率"></a>c++加快输入效率</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main(){    ios::sync_with_stdio(false);    cin.tie(0);    cout.tie(0);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="c-快读"><a href="#c-快读" class="headerlink" title="c++快读"></a>c++快读</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline int read(){    int X = 0; bool flag = 1; char ch = getchar();    while(ch&lt;'0' || ch&gt;'9') {        if(ch == '-') flag = 0;        ch = getchar;    }    while(ch&gt;='0' &amp;&amp; ch&lt;'9') {        X = (X&lt;&lt;1) + (X&lt;&lt;3) + ch-'0';        ch = getchar();    }    if(flag) return X;    return ~(X-1);}{int tmp = read();    std::cout &lt;&lt; temp &lt;&lt; std::endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展:快速输出</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline void write(int X){if(X&lt;0) {        X = ~(X-1);        putchar('-');    }    if(X&gt;9) write(X/10);    putchar(X%10 + '0');    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="goto跳转语句"><a href="#goto跳转语句" class="headerlink" title="goto跳转语句"></a>goto跳转语句</h2><p>goto FLAG:</p><p>FLAG:</p><p><strong>不推荐使用</strong></p><h2 id="数组逆置"><a href="#数组逆置" class="headerlink" title="数组逆置"></a>数组逆置</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int arr[10];int beg = 0;int end = sizeof(arr)/sizeof(arr[0]) -1;for(int i=beg, j = end; i&lt;= end/2/*i&lt;j*/; i++, j--){    //n -1 - i;    int temp = arr[i];    arr[i] = arr[j];    arr[j] = temp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i =1; i &lt;n ;i++ ){//已经排序好的个数    for(int j=0; j&lt;n-i j++){//进行交换的        if(a[j+1] &lt; a[j]){            swap(a[j+1], a[j]);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重复执行n次的简单模板"><a href="#重复执行n次的简单模板" class="headerlink" title="重复执行n次的简单模板"></a>重复执行n次的简单模板</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while(n--) {    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="曼哈顿距离-直走-d-abs-x1-x2-abs-y1-y2"><a href="#曼哈顿距离-直走-d-abs-x1-x2-abs-y1-y2" class="headerlink" title="曼哈顿距离(直走):d = abs(x1-x2)+abs(y1-y2);"></a>曼哈顿距离(直走):d = abs(x1-x2)+abs(y1-y2);</h3><h3 id="切比雪夫距离-直走加斜着走-最短距离-min-abs-x1-x2-abs-y1-y2"><a href="#切比雪夫距离-直走加斜着走-最短距离-min-abs-x1-x2-abs-y1-y2" class="headerlink" title="切比雪夫距离:直走加斜着走: 最短距离: min(abs(x1-x2), abs(y1-y2));"></a>切比雪夫距离:直走加斜着走: 最短距离: min(abs(x1-x2), abs(y1-y2));</h3><h3 id="输入一个n，再输入n个整数。将这个数组顺时针旋转k-k"><a href="#输入一个n，再输入n个整数。将这个数组顺时针旋转k-k" class="headerlink" title="输入一个n，再输入n个整数。将这个数组顺时针旋转k(k <= n)次，最后将结果输出。"></a>输入一个n，再输入n个整数。将这个数组顺时针旋转k(k &lt;= n)次，最后将结果输出。</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//数组一个一个拿,最后循环做这个就行了#include&lt;iostream&gt;using namespace std;int a[100];int main() {    int n, k;    cin &gt;&gt; n &gt;&gt; k;    for(int i= 0; i&lt;n; i++){        cin &gt;&gt; a[i];    }    while(k--){        int t = a[n-1];        for(int i = n-2; i&gt;=0; i--){            a[i+1] = a[i];        }        a[0] = t;    }    for(int i = 0; i&lt;n; i++) cout &lt;&lt; a[i] &lt;&lt; a[i] &lt;&lt; ' ';//循环输出}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h1><p>常量(的)指针:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int* p = &amp;a;//指针指向可以修改,但是指针指向的值不可以改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指针(的)常量:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* const p = &amp;a;//指针的指向不可以改,指针指向的值可以改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即修饰常量又修饰指针:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int* const p = &amp;a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="结构体赋值"><a href="#结构体赋值" class="headerlink" title="结构体赋值:"></a>结构体赋值:</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Student{    string name;    int age;    int score;    }s3;struct Student S1;struct Student S2 = {"李四", 19, 80};3.定义结构体时创建结构体变量c++中struct创建结构体变量时可以省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体数组:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct student arr[3] = {    {"张三", 18, 80},    {"李四", 19, 60},    {"李四", 19, 60}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针:"></a>结构体指针:</h3><p>student *p = &amp;s;</p><h1 id="char数组难点"><a href="#char数组难点" class="headerlink" title="char数组难点:"></a>char数组难点:</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char a[] = {'C', '+', '+'};char b[4] = {'D', '+', '+', '\0'};char c[5] = {'E', '+', '+', '\0'};// 最后一个位置会补\0cout &lt;&lt; a &lt;&lt; endl;// 输出"C++D++"，因为字符数组a不会自动添加'\0'，cout会读取到b的部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string库函数"><a href="#string库函数" class="headerlink" title="string库函数:"></a>string库函数:</h2><p>string s;</p><p>s.find(‘a’);//从左往右找</p><p>s.rfind(‘a’);//从右往左找</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"># include&lt;string&gt;# include&lt;iostream&gt;using namespace std;int main(){string str = "123456123456123456";cout&lt;&lt;str&lt;&lt;endl&lt;&lt;"0123456789ABCDEFGHJ"&lt;&lt;endl;//方便查看上面字符串的下标 int pos = str.rfind("456",12);cout&lt;&lt;pos&lt;&lt;endl;;return 0;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二者均返回其在字符串中的下标</p><p>rfind(str, pos)从pos开始,向前查找符合条件的字符串</p><p>如果前面没有符合条件的字符串会返回string::nops</p><p>int pos = string::nops;//此时pos为-1</p><p>运行结果：</p><p>那么问题来了，如果从pos开始，前面没有符合条件的字符串，会返回什么位置呢？</p><pre><code>int pos = str.rfind("456",2);运行结果：</code></pre><p>返回无匹配项，即string::npos</p><p>另外，如果指定的位置，恰好处在原字符串中可以匹配的某一位置时呢？</p><pre><code>int pos = str.rfind("456",3);//位置4,5,6返回值也相同</code></pre><p>运行结果：</p><p>上面的情况是处在第一个可以匹配的子串当中，会返回该子串的位置，但如果是处于第二个可匹配的子串当中，那么又会返回什么呢？</p><pre><code>int pos = str.rfind("456",9);//位置10,11,12返回值也相同</code></pre><h3 id="综上所述可以得出rfind-str-pos-实际的开始的位置是，pos-str-size-，即从该位置开始（不包括该位置字符）向前寻找匹配项-如果有则返回字符串位置，如果没有则返回string-npos。"><a href="#综上所述可以得出rfind-str-pos-实际的开始的位置是，pos-str-size-，即从该位置开始（不包括该位置字符）向前寻找匹配项-如果有则返回字符串位置，如果没有则返回string-npos。" class="headerlink" title="综上所述可以得出rfind(str,pos)实际的开始的位置是，pos+str.size()，即从该位置开始（不包括该位置字符）向前寻找匹配项,如果有则返回字符串位置，如果没有则返回string::npos。"></a>综上所述<em>可以得出rfind(str,pos)实际的开始的位置是，pos+str.size()，即从该位置开始（不包括该位置字符）向前寻找匹配项,如果有则返回字符串位置，如果没有则返回string::npos。</em></h3><p><em><strong>find(str,pos)是用来寻找从pos开始(包括pos处字符)匹配str的位置</strong></em></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>char s[100];</p><p>cin.getline(s, 100);</p><p>fgets(a, 100, stdin);//会把回车读进来</p><p>如果是string s;</p><p>可以用getline(cin, s);来读一整行</p><p>puts(s);等价于printf(“%s\n”, s);</p><p>#include&lt;string.h&gt;</p><p>strlen(s); //时间复杂度O(n);</p><p>strcmp(s1, s2);//大于就是1, 等于就是0, 小于就是-1;</p><h2 id="string字符串"><a href="#string字符串" class="headerlink" title="string字符串"></a>string字符串</h2><p>string s1;</p><p>string s2 = s1;</p><p>string s3 = “hita”;</p><p>string s4 (10, ‘c’);</p><p>string的输入只能用cin, 但是输出可以使用printf(“%s\n”, s1.c_str());//其中s1.c_str()返回的是转化成字符数组的指针</p><p>s1.empty();//非空返回false, 空返回true</p><p>s1.size();//O(1)</p><p>支持两个string相加</p><p>至少有一个是string型,如果两个都是字符串会报错</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1 = "helloworld";for(char/*auto*/ c : s1){cout &lt;&lt; c &lt;&lt; endl;}for(char &amp;c : s1){    //这里可以通过改变c来改变s1中的某一个字符}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>char str[101];</p><p>fgets(str, 101, stdin);</p><p>求某个字符串中的某一段:</p><p>s.substr(i, len);//如果len很长,那么最多到最后一个就截止了</p><p>s.substr(i+1);//从i+1往后所有的</p><h3 id="将一个数组中中多少位数赋值到另一个数组中"><a href="#将一个数组中中多少位数赋值到另一个数组中" class="headerlink" title="将一个数组中中多少位数赋值到另一个数组中"></a>将一个数组中中多少位数赋值到另一个数组中</h3><p>#include<cstring></cstring></p><p>memcpy(b/<em>目标数组</em>/, a ,size*sizeof(a[0]));welll 0</p><h1 id="struct类"><a href="#struct类" class="headerlink" title="struct类"></a>struct类</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Person{    int age, height;    double money;    Person() {            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/09/15/shu-ju-jie-gou/"/>
      <url>/2023/09/15/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>1.存储数据</p><p>2.存储数据表的长度</p><p>3.记录存储容量</p><h2 id="c语言定义结构体来表示顺序表"><a href="#c语言定义结构体来表示顺序表" class="headerlink" title="c语言定义结构体来表示顺序表"></a>c语言定义结构体来表示顺序表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> Table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建顺序表"><a href="#创建顺序表" class="headerlink" title="创建顺序表"></a>创建顺序表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Size</span> <span class="token expression"><span class="token number">5</span> </span><span class="token comment">//宏定义,表示最大存储容量</span></span><span class="token keyword">void</span> <span class="token function">initTable</span><span class="token punctuation">(</span>Table <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//构造空表,动态申请内存空间</span>    t<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>Size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如申请失败,作出提示并直接退出程序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t <span class="token operator">-&gt;</span> head<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//空表长度初始化为0</span>    t<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//空表初始存储空间</span>    t<span class="token operator">-&gt;</span>size <span class="token operator">=</span> Size<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序表使用"><a href="#顺序表使用" class="headerlink" title="顺序表使用"></a>顺序表使用</h2><p>创建顺序表并存储元素{1, 2, 3, 4, 5};</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Size</span> <span class="token expression"><span class="token number">5</span> </span><span class="token comment">// 对Size进行宏定义,表示顺序表的最大容量</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">initTable</span><span class="token punctuation">(</span>Table <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>Size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果申请失败,作出提示并直接退出</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t <span class="token operator">-&gt;</span> head<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* 该程序中，exit(0)的作用是什么，为何要有这一句？ 展开Exit() 是电脑函数。函数名: exit()所在头文件：stdlib.h功 能: 关闭所有文件，终止正在执行的进程。exit(1)表示异常退出.这个1是返回给操作系统的。exit(x)（x不为0）都表示异常退出exit(0)表示正常退出exit()的参数会被传递给一些操作系统，包括UNIX,Linux,和MS DOS，以供其他程序使用。stdlib.h: void exit(int status);参 数 : status //程序退出的返回值.*/</span>    <span class="token punctuation">}</span>    t<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    t<span class="token operator">-&gt;</span>size <span class="token operator">=</span> Size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出顺序表中元素的函数</span><span class="token keyword">void</span> <span class="token function">displayTable</span><span class="token punctuation">(</span>Table t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Table t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表中存储的元素分别是: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">displayTable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放申请的堆内存</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>数据域|指针域</p><p>c语言用结构体表示链表中的结点,</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">link</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> elem<span class="token punctuation">;</span><span class="token comment">//数据域</span>    <span class="token keyword">struct</span> <span class="token class-name">link</span><span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//代表指针域,指向直接后继元素</span><span class="token punctuation">}</span>Link<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>//习惯将结点中的指针命名为next,因此指针域又被称为Next域</p><p>地标指针</p><p>串连指针</p><h3 id="创建一个不含头节点的链表"><a href="#创建一个不含头节点的链表" class="headerlink" title="创建一个不含头节点的链表"></a>创建一个不含头节点的链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Link<span class="token operator">*</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">//1.创建头指针</span>    Link<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//2.创建首元结点</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token comment">//每创建一个结点,都令其直接前驱结点指向它</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个结点</span>        Link<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         a<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> i<span class="token punctuation">;</span>    a<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp <span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建含有头节点的链表"><a href="#创建含有头节点的链表" class="headerlink" title="创建含有头节点的链表"></a>创建含有头节点的链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Link<span class="token operator">*</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>       <span class="token comment">//创建头指针的同时创建头结点</span>    Link<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">-&gt;</span> elem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    head <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//创建串联指针</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Link<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> i<span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">//每次 temp 指向的结点就是a的直接前驱结点</span>        temp <span class="token operator">-&gt;</span> next <span class="token operator">=</span> a<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-含有头节点-插入元素"><a href="#链表-含有头节点-插入元素" class="headerlink" title="链表(含有头节点)插入元素"></a>链表(含有头节点)插入元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insertElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//创建临时结点temp</span>    <span class="token comment">//首先要找到插入位置的上一个结点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> add<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">-&gt;</span> elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>    c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-无头节点-插入元素"><a href="#链表-无头节点-插入元素" class="headerlink" title="链表(无头节点)插入元素"></a>链表(无头节点)插入元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Link<span class="token operator">*</span> <span class="token function">insertElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> elem<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>add <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建插入结点c</span>        Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        Link<span class="token operator">*</span> temp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//创建临时结点temp;</span>        <span class="token comment">//首先找到要插入位置的上一个结点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> add<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置无效\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建插入结点c</span>        c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-带头节点-删除元素"><a href="#链表-带头节点-删除元素" class="headerlink" title="链表(带头节点)删除元素"></a>链表(带头节点)删除元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为原链表,elem为要删除的目标元素</span><span class="token keyword">int</span> <span class="token function">delElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> del <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>temp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> find <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//1,找到目标元素的直接前驱结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            find <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>find <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//删除失败</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment">//标记要删除的结点</span>        del <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-不带头节点-删除元素"><a href="#链表-不带头节点-删除元素" class="headerlink" title="链表(不带头节点)删除元素"></a>链表(不带头节点)删除元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为原链表,elem为要删除的目标元素</span><span class="token keyword">int</span> <span class="token function">delElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> del <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment">//删除首元结点需要单独考虑</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> find <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//找到目标元素直接前驱结点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>                find <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>find<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//删除失败</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment">//标记要删除的结点</span>            del <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token comment">//将,目标结点从链表上摘除</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数返回1时, 表示删除成功;返回-1,表示删除失败.注意,该函数的形参p为二级指针,调用时需要传递链表头指针的地址</p><h3 id="链表查找元素"><a href="#链表查找元素" class="headerlink" title="链表查找元素"></a>链表查找元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为原链表,elem表示被查找元素</span><span class="token keyword">int</span> <span class="token function">selectElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//带头节点,p指向首元结点</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//返回-1,表示未找到</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不带头节点的链表注释掉第五行</p><h3 id="链表更新元素"><a href="#链表更新元素" class="headerlink" title="链表更新元素"></a>链表更新元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为有头节点的链表,oldElem为旧元素,newElem为新元素</span><span class="token keyword">int</span> <span class="token function">amendElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> oldElem<span class="token punctuation">,</span> <span class="token keyword">int</span> newElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> oldElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> newElem<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回1,表示成功;返回-1,表示失败.如果是没有头结点,注释掉第三行</p><h3 id="对有头节点的链表实现增删查改"><a href="#对有头节点的链表实现增删查改" class="headerlink" title="对有头节点的链表实现增删查改"></a>对有头节点的链表实现增删查改</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">incldue</span><span class="token expression"><span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span><span class="token comment">//链表中结点的结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">link</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> elem<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">link</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>Link<span class="token punctuation">;</span>Link<span class="token operator">*</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Link<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个结点</span>        Link<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> i<span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insertElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> add<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置无效\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>    c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">delElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> del <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>temp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> find <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            find <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>find <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        del <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">selectElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">amendElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> oldElem<span class="token punctuation">,</span> <span class="token keyword">int</span> newElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> oldElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> newElem<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">diaplay</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;d"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Link_free</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> fr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        fr <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化链表为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在第3的位置上添加元素6:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除元素4:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查找元素 2:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"元素2的位置为: %d\n"</span><span class="token punctuation">,</span> <span class="token function">selectElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更元素1的值为6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">amendElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Link_free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表反转的四种方法-无头节点实现版"><a href="#链表反转的四种方法-无头节点实现版" class="headerlink" title="链表反转的四种方法(无头节点实现版)"></a>链表反转的四种方法(无头节点实现版)</h3><h4 id="迭代反转法-可有头结点可无"><a href="#迭代反转法-可有头结点可无" class="headerlink" title="迭代反转法(可有头结点可无)"></a>迭代反转法(可有头结点可无)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//迭代反转法,head为无头节点的头指针</span>link<span class="token operator">*</span> <span class="token function">iteration_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        link<span class="token operator">*</span> beg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        link<span class="token operator">*</span> mid <span class="token operator">=</span> head<span class="token punctuation">;</span>        link<span class="token operator">*</span> end <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token comment">//一直遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//修改mid所指节点的指向</span>mid<span class="token operator">-&gt;</span>next <span class="token operator">=</span> beg<span class="token punctuation">;</span>            <span class="token comment">//此时判断end是否为NULL, 如果成立则退出循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//整体向后移动3个指针</span>            beg <span class="token operator">=</span> mid<span class="token punctuation">;</span>            mid <span class="token operator">=</span> end<span class="token punctuation">;</span>            end <span class="token operator">=</span> end<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//最后修改head头指针的指向</span>        head <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="递归实现链表反转-可头可不头-但是带头节点麻烦"><a href="#递归实现链表反转-可头可不头-但是带头节点麻烦" class="headerlink" title="递归实现链表反转(可头可不头,但是带头节点麻烦)"></a>递归实现链表反转(可头可不头,但是带头节点麻烦)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">link<span class="token operator">*</span> <span class="token function">recursive_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//递归的出口</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//空链表或只有一个结点,直接返回头指针</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment">//一直递归,找到链表中最后一个结点</span>        link<span class="token operator">*</span> new_head <span class="token operator">=</span> <span class="token function">recursive_reverse</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当逐层退出时, new_head 的指向都不变,一直指向原链表中最后一个结点</span>        <span class="token comment">//递归每退出一层,函数中head的指向都会发生改变,都指向上一个结点</span>        <span class="token comment">//每退出一层,都需要改变head-&gt;next结点指针域的指向,同时令head所指节点的 指针域为NULL</span>        head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">//每一层递归结束都要将新的头指针返回给上一层</span>        <span class="token keyword">return</span> new_head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">link<span class="token operator">*</span> <span class="token function">head_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> new_head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new_head<span class="token punctuation">;</span>        new_head <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> new_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="就地逆置"><a href="#就地逆置" class="headerlink" title="就地逆置"></a>就地逆置</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">link<span class="token operator">*</span> <span class="token function">local_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> beg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    link<span class="token operator">*</span> end <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    beg <span class="token operator">=</span> head<span class="token punctuation">;</span>    end <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>beg<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        beg<span class="token operator">-&gt;</span>next <span class="token operator">=</span> end<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        end<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> end<span class="token punctuation">;</span>        end <span class="token operator">=</span> beg<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就地逆置:先把一个反转逻辑粗糙的写出来,然后优化,关键是要想出指针的骚操作</p><h3 id="判断链表相交"><a href="#判断链表相交" class="headerlink" title="判断链表相交"></a>判断链表相交</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> elem<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Link</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>link<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>开始判断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//自定义bool类型</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">bool</span><span class="token punctuation">{</span>    False <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    True <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>bool<span class="token punctuation">;</span><span class="token comment">//L1和L2为2个单链表, 函数返回True表示链表相交,返回False表示不相交</span>bool <span class="token function">LinkIntersect</span><span class="token punctuation">(</span>link<span class="token operator">*</span> L1<span class="token punctuation">,</span> link<span class="token operator">*</span> L2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> p1 <span class="token operator">=</span> L1<span class="token punctuation">;</span>    link<span class="token operator">*</span> p2 <span class="token operator">=</span> L2<span class="token punctuation">;</span>    <span class="token comment">//逐个遍历L1链表中的各个节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//遍历L2链表,针对每个p1,依次和p2所指节点作比较</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//p1,p2中记录的就是各个节点的存储地址,直接比较即可</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> True<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p2 <span class="token operator">=</span> p2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化一"><a href="#优化一" class="headerlink" title="优化一:"></a>优化一:</h4><h5 id="实际上，第-1-种实现方案还可以进一步优化。结合图-1②，2-个单链表相交有一个必然结果，即这-2-个链表-的最后一个节点必定相同；反之，如果-2-个链表不相交，则这-2-个链表的最后一个节点必定不相同。"><a href="#实际上，第-1-种实现方案还可以进一步优化。结合图-1②，2-个单链表相交有一个必然结果，即这-2-个链表-的最后一个节点必定相同；反之，如果-2-个链表不相交，则这-2-个链表的最后一个节点必定不相同。" class="headerlink" title="实际上，第 1 种实现方案还可以进一步优化。结合图 1②，2 个单链表相交有一个必然结果，即这 2 个链表 的最后一个节点必定相同；反之，如果 2 个链表不相交，则这 2 个链表的最后一个节点必定不相同。"></a>实际上，第 1 种实现方案还可以进一步优化。结合图 1②，2 个单链表相交有一个必然结果，即这 2 个链表 的最后一个节点必定相同；反之，如果 2 个链表不相交，则这 2 个链表的最后一个节点必定不相同。</h5><p>利用判断最后一个节点的方法判断相交</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">LinkIntersect</span><span class="token punctuation">(</span>link<span class="token operator">*</span> L1<span class="token punctuation">,</span> link<span class="token operator">*</span> L2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> p1 <span class="token operator">=</span> L1<span class="token punctuation">;</span>    link<span class="token operator">*</span> p2 <span class="token operator">=</span> L2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p2 <span class="token operator">=</span> p2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> True<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过优化.时间复杂度缩小为O(n)</p><h4 id="优化二"><a href="#优化二" class="headerlink" title="优化二:"></a>优化二:</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">LinkIntersect</span><span class="token punctuation">(</span>link<span class="token operator">*</span> L1<span class="token punctuation">,</span> link<span class="token operator">*</span> L2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> plong <span class="token operator">=</span> L1<span class="token punctuation">;</span>    link<span class="token operator">*</span> pshort <span class="token operator">=</span> L2<span class="token punctuation">;</span>    link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num2  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>plong<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num1<span class="token operator">++</span><span class="token punctuation">;</span>        plong <span class="token operator">=</span> plong<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pshort<span class="token punctuation">)</span> <span class="token punctuation">}</span>        num2<span class="token operator">++</span><span class="token punctuation">;</span>        pshort <span class="token operator">=</span> pshort<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//重置plong和pshort,使plong代表较长的链表,pshort代表较短 的链表</span>plong <span class="token operator">=</span> L1<span class="token punctuation">;</span>pshort <span class="token operator">=</span> L2<span class="token punctuation">;</span>step <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>plong <span class="token operator">=</span> L2<span class="token punctuation">;</span>     pshort <span class="token operator">=</span> L1<span class="token punctuation">;</span>        step <span class="token operator">=</span> num2 <span class="token operator">-</span>num1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//在plong链表中找到和pshort等长度的子链表</span>   temp <span class="token operator">=</span> plong<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        step<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;&amp;</span> pshort<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> pshort<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> True<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        pshort <span class="token operator">=</span> pshort<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点分析;:</p><p>可以找到2个单链表相交的交点(也就是相交时的第一个交点),也就是使LinkIntersect()函数返回True时的temp指针指向的那个节点.另外,此方案的时间复杂度也为O(n)</p><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>数据域 游标</p><p>c语言实现节点</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> date<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>component<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>静态链表中,除了数据本身通过游标组成的链表外,还需要有一条连接各个空闲位置的链表,称为备用链表</p><p>备用链表的作用是回收数组中未使用或之前使用过(目前未使用) 的存储空间,留待后期使用.也就是说,静态链表使用数组申请的物理空间中,存有两个链表,一条连接数据,另一条连接数组中未使用的空间</p><p><strong>通常备用链表的表头位于数组下标为0(a[0])的位置,而数据链表的表头位于数组下标为1(a[1])的位置</strong></p><p>静态链表中设置备用链表的好处是,可以清楚的知道数组是否有空闲位置,以便数据链表添加新数据时使用.比如, 若静态链表中数组下标为0的位置上存有数据,则证明数组已满</p><p>例如使用静态链表存储{1,2,3} , 假设使用长度为6的数组a,则存储状态</p><p>备用链表上连接的依次是a[0]. a[2] . a[4].而数据链表上连接的依次是a[1].  a[3] 和a[5]</p><h4 id="创建静态链表c语言实现"><a href="#创建静态链表c语言实现" class="headerlink" title="创建静态链表c语言实现"></a>创建静态链表c语言实现</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxSize</span> <span class="token expression"><span class="token number">6</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> date<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>component<span class="token punctuation">;</span><span class="token comment">//将结构体数组中所有分量连接到备用链表中</span><span class="token keyword">void</span> <span class="token function">reserveArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> arry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化静态链表</span><span class="token keyword">int</span> <span class="token function">initArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> arry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">displayAr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从备用链表上摘下空闲节点的函数</span><span class="token keyword">int</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    component array<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> body <span class="token operator">=</span> <span class="token function">initArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"静态链表为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">displayArr</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建备用链表</span><span class="token keyword">void</span> <span class="token function">reserveArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将每个数组分量链接到一起</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    array<span class="token punctuation">[</span>maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//链表最后一个结点的游标值为0</span><span class="token punctuation">}</span><span class="token comment">//提取分配空间</span><span class="token keyword">int</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//若备用链表非空, 则返回分配的结点下标,否则返回0(当分配到最后一个结点时,该结点的游标值为0)</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//初始化静态链表</span><span class="token keyword">int</span> <span class="token function">initArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tempBody <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">reserveArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    body <span class="token operator">=</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//建立首元结点</span>    array<span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//声明一个变量,把它当指针使, 指向链表的最后的一个结点,当前和首元结点重合</span>    tempBody <span class="token operator">=</span> body<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从备用链表中拿出空闲的分量</span>        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//初始化新得到的 空间结点</span>        array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//将新得到的结点链接到数据链表的尾部</span>        tempBody <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 将指向链表最后一个节点的指针后移</span>    <span class="token punctuation">}</span>    array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//新链表最后一个结点的指针设置为0</span>    <span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">displayArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tempBody <span class="token operator">=</span> body<span class="token punctuation">;</span><span class="token comment">//tempBody准备做遍历使用</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        tempBody <span class="token operator">=</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链表插入元素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//body表示链表头节点所在的位置,add表示插入元素的位置,num表示要插入的数据</span><span class="token keyword">int</span> <span class="token function">insertArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> body<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tempBody <span class="token operator">=</span> body<span class="token punctuation">;</span><span class="token comment">//tempBody做遍历结构体数组使用</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> insert <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构(c语言) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言头文件</title>
      <link href="/2023/09/12/c-yu-yan-tou-wen-jian/"/>
      <url>/2023/09/12/c-yu-yan-tou-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>  什么情况下用&lt;&gt;, 什么情况下用””</p><p>(1)如果是系统头文件,string.h , stdlib.h等,&lt;&gt;</p><p>(2)如果是独立的第三方模块安装的 &lt;&gt; 比如 mysql.h</p><p>(3)如果是自己项目的头文件, 一定使用””</p><p>为什么不全部用”” , 而还要混合&lt;&gt; 来自寻烦恼呢?</p><p>​1&gt;加快编译器搜索头文件的速度</p><p>​2&gt;方便维护</p><p>可以知道是不是自己做的</p><h3 id="头文件代码模块"><a href="#头文件代码模块" class="headerlink" title="头文件代码模块"></a>头文件代码模块</h3><p>不给外部模块用的函数一定不要写到头文件里面</p><p>头文件一定要写上防止重复包含</p><p>不要在头文件里面定义全局变量,如果有两个模块都包含了这个头文件,那么就会定义两次全局变量,那么会重复定义</p><p>“”三种方式:</p><p>主程序所在文件夹:自己写的</p><p>库函数</p><p>第三方库</p><p>&lt;&gt;两种方式</p>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言字符与字符串</title>
      <link href="/2023/09/12/c-yu-yan-zi-fu-yu-zi-fu-chuan/"/>
      <url>/2023/09/12/c-yu-yan-zi-fu-yu-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p> c语言字符串是以’\0’结尾</p><p>‘\0’即0</p><p>字符串内存除了存放数据以外,还要存放结束符,所以内存要+1</p><p>字符串的定义</p><p>(1)常量字符串定义,一旦定义常驻内存,不可修改</p><p>(2)全局的,只读的,不可修改的,分配在代码段上</p><p>有一个char*的指针变量指向这个常量字符串</p><p>指向字符串内存第一个字符的首地址</p><p>在代码段上定义一个常量字符串,并有一个指针变量☞过去</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str_ptr <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str_ptr<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//llo</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有多个地方使用同一个常量字符串那么他们是同一块内存</p><p>验证</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str_ptr2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x  0x%x"</span><span class="token punctuation">,</span> str_ptr <span class="token punctuation">,</span> str_ptr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>//常量字符串定义在代码段上的,  –&gt;只读的</p><p>str_ptr2[0] =’y’;  //会报错,因为是受保护的内存</p><p>非常量字符串<br>内存,内容<br>hello</p><p>char str_data[5+1]  = {‘H’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\0’};</p><p>char str_data[5+1] = “hello”;</p><p>char str_data3[] = “helloworld”;</p><p>//动态内存分配</p><p>char* str_data4= malloc(10+1);</p><p>char* str = (char * ) malloc(15); 如果不加malloc前面不加(char*)会有影响吗</p><p><a href="https://www.zhihu.com/question/280418752">不加(char*)的影响取决于你使用的编译器和C标准。在C89标准中，malloc返回的是void<em>类型的指针，这种指针可以隐式转换为任何其他类型的指针，所以不需要强制类型转换。但是在C99和C11标准中，malloc返回的还是void</em>类型的指针，但是这种指针不能隐式转换为其他类型的指针，所以需要强制类型转换。如果不加(char*)，可能会导致编译器报警告或错误</a><a href="https://www.zhihu.com/question/280418752">1</a><a href="https://www.zhihu.com/question/399399009">2</a><a href="https://zhidao.baidu.com/question/1673888175226093307.html">3</a>。</p><p><a href="https://blog.csdn.net/SillyGOAT/article/details/121330462">另外，如果你使用的是C++编译器，那么malloc返回的void<em>类型的指针也不能隐式转换为其他类型的指针，所以也需要强制类型转换。如果不加(char</em>)，会导致编译错误</a><a href="https://blog.csdn.net/SillyGOAT/article/details/121330462">4</a>。</p><p>总之，为了保证代码的可移植性和规范性，建议你在malloc前面加上(char*)。</p><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str_data4<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str_data4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token char">'H'</span><span class="token punctuation">;</span>str_data4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'e'</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> src <span class="token operator">=</span> <span class="token string">"Helloworld"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>str_data4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> str_data4<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//'\0'</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str_data4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>str_data4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存:全局的(常字符串),栈上的,堆上的</p><p>统计字符串字符字数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> walk <span class="token operator">=</span> ptr<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>walk <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        walk<span class="token operator">++</span><span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串copy</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> src_ptr <span class="token operator">=</span> <span class="token string">"helloworld!!"</span><span class="token punctuation">;</span><span class="token keyword">char</span> dst_ptr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">my_strcpy</span><span class="token punctuation">(</span>dst_ptr<span class="token punctuation">,</span> src_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">my_strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token punctuation">;</span>        dst<span class="token operator">++</span><span class="token punctuation">;</span>        src<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你使用指针访问内存时,内存多大要清楚,否则运行时会报错</p><p>函数my_strcmp(char* str1, char* str2);</p><p>要判断是否会越界之类的</p><p>大写字符二进制值小于小写</p><p>字符串操作函数</p><p>printf(“%s”);%s格式化输出一个字符串,把字符串内容打印出来</p><p>strlen(字符串首地址); 返回字符串的长度(一个字符串包含字符的个数)</p><p>strcpy(目标内存地址, 字符串首地址);</p><p>strcmp(左边字符串对象, 右边字符串对象),判断是否==0 相等</p><p>strncpy(目标字符串地址,已有字符串, 个数n)拷贝指定的字符个数到目标地址,(<strong>记得在目标字符串尾加上0</strong>)</p><p>strncmp:比较特定个数的字符串</p><p>strdup:复制一个字符串对象:内存分配到堆上(内部调用malloc), 不用了,用free释放</p><p>数组名字,sizeof(数组名字)返回的是数组的大小</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>头文件怎么制作</title>
      <link href="/2023/09/10/tou-wen-jian-zen-me-zhi-zuo/"/>
      <url>/2023/09/10/tou-wen-jian-zen-me-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MY_MATH_H_</span><span class="token comment">//防止重复包含</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MY_MATH_H_</span></span><span class="token comment">//如果这个函数可以公布给给别人使用,那么可以把这个函数接口</span><span class="token comment">//申明到头文件</span><span class="token keyword">int</span> <span class="token function">math_abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">math_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存操作函数_宏_条件编译_代码模块</title>
      <link href="/2023/09/10/nei-cun-cao-zuo-han-shu-hong-tiao-jian-bian-yi-dai-ma-mo-kuai/"/>
      <url>/2023/09/10/nei-cun-cao-zuo-han-shu-hong-tiao-jian-bian-yi-dai-ma-mo-kuai/</url>
      
        <content type="html"><![CDATA[<p>char* ptr = (int*)malloc(100);</p><p>memset(ptr , 0x0 , 100);</p><p>memmove一个一个来的 ,比较安全</p><p>memcopy大段</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++引用</title>
      <link href="/2023/09/08/c-yin-yong/"/>
      <url>/2023/09/08/c-yin-yong/</url>
      
        <content type="html"><![CDATA[<p> 引用和指针的区别.</p><p>指针存储的是一块内存的地址,通过地址,可以访问这块内存<br>引用是一个变量的别名,在创建时必须初始化</p><p>引用在初始化之后不可变,指针可以修改指向的对象</p><pre class="line-numbers language-none"><code class="language-none">int *p = &amp;a;//初始化指针p,指向a的地址int &amp;r = a;//给a取一个别名r,可以说r就是a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指针写法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void swap(int *a,int *b){int tmp;tmp = *a;*a = *b;*b = tmp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用写法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void swap(int &amp;a,int &amp;b){int tmp;tmp = a;a = b;b = tmp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static修饰符</title>
      <link href="/2023/09/05/static-xiu-shi-fu/"/>
      <url>/2023/09/05/static-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<p> static修饰的全局变量只能在当前.c文件中访问,减少代码维护成本</p><p>static修饰的局部变量只能在声明的函数中使用,不随函数的结束而释放</p>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范与整洁</title>
      <link href="/2023/09/05/dai-ma-gui-fan-yu-zheng-ji/"/>
      <url>/2023/09/05/dai-ma-gui-fan-yu-zheng-ji/</url>
      
        <content type="html"><![CDATA[<p> 注意tab缩进</p><p>注意类似for里面的缩进</p><p>注意每个单独逻辑之间用空行分开</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见程序英文缩写</title>
      <link href="/2023/09/05/chang-jian-cheng-xu-ying-wen-suo-xie/"/>
      <url>/2023/09/05/chang-jian-cheng-xu-ying-wen-suo-xie/</url>
      
        <content type="html"><![CDATA[<p> i -&gt; index</p><p>pointer -&gt; ptr</p><p>source –&gt; src</p><p>function -&gt; func</p><p>left hand side-&gt;lhs</p><p>right hand side -&gt; rhs</p><p>stand -&gt; std</p><p>memory -&gt;mem</p><p>library -&gt; lib</p><p>input/output -&gt; io</p><p>file stream -&gt; fs</p><p>file open -&gt; fopen</p><p>header -&gt; h</p>]]></content>
      
      
      <categories>
          
          <category> 程序员英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种命名方法</title>
      <link href="/2023/09/05/san-chong-ming-ming-fang-fa/"/>
      <url>/2023/09/05/san-chong-ming-ming-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>1.linux命名法</p><p>test_func</p><p>2.驼峰命名法</p><p>testFunc</p><p>3.微软匈牙利命名法</p><p>TestFunc</p>]]></content>
      
      
      
        <tags>
            
            <tag> 变量命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argc与argv-c语言main函数中参数的意义</title>
      <link href="/2023/09/05/argc-yu-argv-c-yu-yan-main-han-shu-zhong-can-shu-de-yi-yi/"/>
      <url>/2023/09/05/argc-yu-argv-c-yu-yan-main-han-shu-zhong-can-shu-de-yi-yi/</url>
      
        <content type="html"><![CDATA[<p> argc:argument count</p><p>argv: argument value字符串数组</p>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS头文件不同符号的区别和使用</title>
      <link href="/2023/09/01/vs-tou-wen-jian-bu-tong-fu-hao-de-qu-bie-he-shi-yong/"/>
      <url>/2023/09/01/vs-tou-wen-jian-bu-tong-fu-hao-de-qu-bie-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>​包含头文件的方式</p><h4 id="No-1-include"><a href="#No-1-include" class="headerlink" title="No.1 #include<stdio.h>"></a>No.1 #include&lt;stdio.h&gt;</h4><p>//在标准库的目录下查找</p><h4 id="No-2-include”xxx-h”"><a href="#No-2-include”xxx-h”" class="headerlink" title="No.2#include”xxx.h”"></a>No.2#include”xxx.h”</h4><p>//先在标准库目录下找,按照路径的方式查找</p><h4 id="No-3-路径"><a href="#No-3-路径" class="headerlink" title="No.3 路径"></a>No.3 路径</h4><p>//绝对路径:带盘符</p><p>#include”F:/fhead.h”</p><p>//相对路径不带盼复</p><p>#includue “myHead.h”</p><p>#include”xxx\ \mm.h”\一般路径用反斜杠或者 \ \</p><p>#include&lt;xxx.h&gt;</p><p>//无法打开包括文件:”xxx.h”: No such file or directory</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS </tag>
            
            <tag> 头文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器指令与汇编语言</title>
      <link href="/2023/08/31/ji-qi-zhi-ling-yu-hui-bian-yu-yan/"/>
      <url>/2023/08/31/ji-qi-zhi-ling-yu-hui-bian-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="机器指令与汇编语言"><a href="#机器指令与汇编语言" class="headerlink" title="机器指令与汇编语言"></a>机器指令与汇编语言</h1><h3 id="1-cpu指令体系"><a href="#1-cpu指令体系" class="headerlink" title="1.cpu指令体系:"></a>1.cpu指令体系:</h3><p>cpu有一个指令集的规范,怎样向cpu下达指令</p><p>每种类型cpu都有统一指令集的规范,不同厂家生产的同类型cpu指令基本是兼容的 </p><p>计算机只有二进制数据0,1,所以每条机器指令是由一串二进制组成</p><p>每条指令都有一个二进制模板,这个模板定义在cpu指令集里</p><h3 id="2-机器代码"><a href="#2-机器代码" class="headerlink" title="2.机器代码"></a>2.机器代码</h3><p>完成一个特定功能的,一连串机器指令的集合</p><p>cpu一条一条指令执行这些机器代码,完成特定的功能</p><h3 id="3-程序"><a href="#3-程序" class="headerlink" title="3.程序"></a>3.程序</h3><p>编写指令给cpu,让他完成特定的功能</p><h3 id="4-汇编语言"><a href="#4-汇编语言" class="headerlink" title="4.汇编语言"></a>4.汇编语言</h3><p>指令助记符号,帮助我们记忆和使用指令模板,大大降低程序的编写复杂度和阅读困难</p>]]></content>
      
      
      <categories>
          
          <category> 游戏服务器开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器指令与汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office软件页面变成灰色</title>
      <link href="/2023/08/31/office-ruan-jian-bian-cheng-hui-se/"/>
      <url>/2023/08/31/office-ruan-jian-bian-cheng-hui-se/</url>
      
        <content type="html"><![CDATA[<p> 进入选项-&gt;常规-&gt;个性化设置</p>]]></content>
      
      
      <categories>
          
          <category> 故障 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>套接字Socket</title>
      <link href="/2023/08/30/tao-jie-zi-socket/"/>
      <url>/2023/08/30/tao-jie-zi-socket/</url>
      
        <content type="html"><![CDATA[<p> <strong>套接字</strong> </p><p>网络连接的每一端都需要存储一些信息，这些信息至少包括：<strong>连 接使用的协议</strong>、<strong>自己的地址</strong>、<strong>对方的地址</strong>、<strong>将要发送的数据</strong>、<strong>接收到 的数据</strong>等。存储和处理这些信息的结构称为<strong>套接字（Socket）</strong>。图1-7 展示了套接字包含的内容，每个Socket都包含网络连接中一端的信 息。每个客户端需要一个Socket结构，服务端则需要<strong>N+1</strong>个Socket结 构，其中N为客户端的连接数，另外一个是服务端打开监听的套接字。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法创建虚拟机</title>
      <link href="/2023/08/29/wu-fa-chuang-jian-xu-ni-ji/"/>
      <url>/2023/08/29/wu-fa-chuang-jian-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<p> 无法创建新虚拟机: 不具备执行此操作的权限:</p><p>用管理员方式打开VMware</p>]]></content>
      
      
      <categories>
          
          <category> 故障 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限故障 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不具备执行此操作的权限解决办法</title>
      <link href="/2023/08/29/bu-ju-bei-zhi-xing-ci-cao-zuo-de-quan-xian-jie-jue-ban-fa/"/>
      <url>/2023/08/29/bu-ju-bei-zhi-xing-ci-cao-zuo-de-quan-xian-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用VMware搭建linux即CentOS服务器</title>
      <link href="/2023/08/29/ru-he-shi-yong-vmware-da-jian-linux-ji-centos-fu-wu-qi/"/>
      <url>/2023/08/29/ru-he-shi-yong-vmware-da-jian-linux-ji-centos-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p> [在VMware中安装CentOS7（超详细的图文教程）_vm安装centos7_qq_45743985的博客-CSDN博客](<a href="https://blog.csdn.net/qq_45743985/article/details/121152504#:~:text=%E5%9C%A8VMware%E4%B8%AD%E5%AE%89%E8%A3%85CentOS7%EF%BC%88%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B%EF%BC%89">https://blog.csdn.net/qq_45743985/article/details/121152504#:~:text=在VMware中安装CentOS7（超详细的图文教程）</a> 1 1、CentOS7的下载 官网下载地址： Download 。 进入CentOS下载官网，找到64位的CentOS7版本。 ,4、CentOS7的网络配置 因为前面在设置CentOS7的网络适配器的时候，设置是NAT模式。 所以这里有两种方法，一种是自动获取IP，另一种是固定获取IP … 5 5、XShell连接CentOS7 我们实际在启动CentOS之后，通常都不会直接在VMware操作CentOS，而是使用工具，推荐使用Xshell。 )</p><p>按下ctrl+c可以终止</p>]]></content>
      
      
      <categories>
          
          <category> 软件环境安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘录入</title>
      <link href="/2023/08/26/jian-pan-lu-ru/"/>
      <url>/2023/08/26/jian-pan-lu-ru/</url>
      
        <content type="html"><![CDATA[<p> 第一套体系:</p><p>​import java.util.scanner</p><p>​Scanner sc = new Scanner(System.in);</p><p>nextInt();接收整数</p><p>nextDouble(); 接收小数</p><p>next(); 接收字符串</p><p>遇到空格, 制表符 , 回车就会停止接受 . 这些数据后面的数据就不会接受了</p><p>第二套体系</p><p>nextInt();接受字符串</p><p>可以接收空格,制表符,遇到回车才会停止接收数据</p><h4 id="两套体系最好不要混用"><a href="#两套体系最好不要混用" class="headerlink" title="两套体系最好不要混用"></a>两套体系最好不要混用</h4>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java文字小游戏</title>
      <link href="/2023/08/25/java-wen-zi-xiao-you-xi/"/>
      <url>/2023/08/25/java-wen-zi-xiao-you-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cugbwfx<span class="token punctuation">.</span>test2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Role</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Role</span> r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"嘿嘿"</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r2<span class="token punctuation">.</span><span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            r1<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ko了"</span> <span class="token operator">+</span> r2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            r2<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ko了"</span> <span class="token operator">+</span> r1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> blood<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> face<span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> attacks_desc<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。"</span><span class="token punctuation">,</span>            <span class="token string">"%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。"</span><span class="token punctuation">,</span>            <span class="token string">"%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> injureds_desc<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"结果%s退了半步，毫发无损"</span><span class="token punctuation">,</span>            <span class="token string">"结果给%s造成一处瘀伤"</span><span class="token punctuation">,</span>            <span class="token string">"结果一击命中，%s痛得弯下腰"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s痛苦地闷哼了一声，显然受了点内伤"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s摇摇晃晃，一跤摔倒在地"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s脸色一下变得惨白，连退了好几步"</span><span class="token punctuation">,</span>            <span class="token string">"结果『轰』的一声，%s口中鲜血狂喷而出"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s一声惨叫，像滩软泥般塌了下去"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> boyfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"风流俊雅"</span><span class="token punctuation">,</span> <span class="token string">"气宇轩昂"</span><span class="token punctuation">,</span> <span class="token string">"相貌英俊"</span><span class="token punctuation">,</span> <span class="token string">"五官端正"</span><span class="token punctuation">,</span> <span class="token string">"相貌平平"</span><span class="token punctuation">,</span> <span class="token string">"一塌糊涂"</span><span class="token punctuation">,</span> <span class="token string">"面目狰狞"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> girlfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"美奂绝伦"</span><span class="token punctuation">,</span> <span class="token string">"沉鱼落雁"</span><span class="token punctuation">,</span> <span class="token string">"婷婷玉立"</span><span class="token punctuation">,</span> <span class="token string">"身材娇好"</span><span class="token punctuation">,</span> <span class="token string">"相貌平平"</span><span class="token punctuation">,</span> <span class="token string">"相貌简陋"</span><span class="token punctuation">,</span> <span class="token string">"惨不忍睹"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> blood<span class="token punctuation">,</span> <span class="token keyword">char</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>        <span class="token function">setFace</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFace</span><span class="token punctuation">(</span><span class="token keyword">char</span> gender<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>gender <span class="token operator">==</span><span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>boyfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> boyfaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>gender <span class="token operator">==</span> <span class="token char">'女'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>girlfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> girlfaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> <span class="token string">"面目狰狞"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> blood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlood</span><span class="token punctuation">(</span><span class="token keyword">int</span> blood<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法的调用者去攻击参数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>attacks_desc<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token class-name">Kungfu</span> <span class="token operator">=</span> attacks_desc<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//输出攻击效果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Kungfu</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算伤害</span>        <span class="token keyword">int</span> hurt <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> remainBlood <span class="token operator">=</span> role<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> hurt<span class="token punctuation">;</span>        remainBlood <span class="token operator">=</span> remainBlood <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> remainBlood<span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setBlood</span><span class="token punctuation">(</span>remainBlood<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//受伤描述</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长相: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>face<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"血量: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>blood<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常有意思的文字游戏,很有成就感.</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文字游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2023/08/25/ce-shi/"/>
      <url>/2023/08/25/ce-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>0823日记</title>
      <link href="/2023/08/23/0823-ri-ji/"/>
      <url>/2023/08/23/0823-ri-ji/</url>
      
        <content type="html"><![CDATA[<p> 好难,一会要java一会c++一会go,我觉得是不是要先入行再想着转岗呢,现在要现有一个主业,然后再想着进阶或者转岗的事情呢?java工资确实低,但是总有工资高的,具体的怎么看呢,其实我自己是一个天生的喜欢偷懒的人,一旦有一个可以玩的借口了那就如同洪水猛兽一样不可控制,等到不想玩了时间又都过去了,空留懊悔,我觉得我应该一边学着黑马的视频,一边学着左程云的算法,一边进行分布式系统的课程进行学习,</p><p>黑马是底线,左程云是进阶,分布式是进进阶</p><p>同时到学校开始上课以后,我需要面对很多的课业,我得好好学以此来应对读研,读一年,然后一定要继续读博,回来拿编制,业余时间足够多之后去搞副业</p><p>我觉得人越是放松越是失去了目标,失去了动力,我也不知道为什么,网络上盛行着的躺平言论似乎并不适合年轻人,你要是说你到了中年身体所有可能性断绝了再去躺平也就是了,为啥要在有可能的时候去躺平呢,这是很难以理解的,他们那样的想法的出现好像是别人给他们的,他们不得不去实现别人给的目标才去躺平,可是那些目标好像就是我想要的啊,一辈子为了房子奋斗,但是要是两个人还款也没有那么不堪啊,自己一个人买小房子不就行了,我以后一定要读博然后当大学教授,这可是为数不多的阶层跃升的好机会,我已经错过了医生,也不想去严格的军工企业,不能再去错过这个了</p><p>​我突然还有一个想法,就是把目前的目标再去细化,细化到每一个可执行的步骤,最主要的就是可执行,执行不了就一直细化,知道细化到可执行不就行了吗</p>]]></content>
      
      
      <categories>
          
          <category> 心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学导论</title>
      <link href="/2023/08/21/ji-suan-ji-ke-xue-dao-lun/"/>
      <url>/2023/08/21/ji-suan-ji-ke-xue-dao-lun/</url>
      
        <content type="html"><![CDATA[<p>  锁存器</p><p>![](C:\Users\10482\Pictures\Screenshots\屏幕截图 2023-08-21 213555.png)</p><p>八进位器</p><p>![](C:\Users\10482\Pictures\Screenshots\屏幕截图 2023-08-21 205510.png)</p><p>cpu</p><p>一个寄存器追踪程序运行到哪了,指令地址寄存器</p><p>一个寄存器用来存当前地址,我们叫它指令地址寄存器</p><p><img src="C:\Users\10482\AppData\Roaming\Typora\typora-user-images\image-20230821222729540.png" alt="image-20230821222729540"></p>]]></content>
      
      
      <categories>
          
          <category> 英文课 </category>
          
          <category> 计算机科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学 </tag>
            
            <tag> 计算机存储设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局部变量和成员变量区别</title>
      <link href="/2023/08/19/ju-bu-bian-liang-he-cheng-yuan-bian-liang-qu-bie/"/>
      <url>/2023/08/19/ju-bu-bian-liang-he-cheng-yuan-bian-liang-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>​</p><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中,方法外</td><td>方法内,方法声明上</td></tr><tr><td>初始化值不同</td><td>有默认初始化值</td><td>没有,使用前需要赋值</td></tr><tr><td>内存位置不同</td><td>堆内存</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>对象创建而存在,对象消失而消失</td><td>随方法调用而存在,随方法运行结束而消失</td></tr><tr><td>作用域</td><td>整个类中有效</td><td>当前方法有效</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 局部变量 </tag>
            
            <tag> 成员变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javane</title>
      <link href="/2023/08/18/java-nei-cun-fen-pei/"/>
      <url>/2023/08/18/java-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<p> java内存分配介绍</p><p>栈:类似子弹夹,先进后出(方法,变量等)</p><p>方法运行时使用的内存,如main方法运行,进入方法栈中执行</p><p>堆:存储对象或组,new来创建的,都存储在堆内存</p><p>方法区: 存储可以运行的class文件</p><h4 id="jdk8以后取消方法区-新增元空间-把原来方法区进行拆分-有点进入元空间-有点进入堆"><a href="#jdk8以后取消方法区-新增元空间-把原来方法区进行拆分-有点进入元空间-有点进入堆" class="headerlink" title="(jdk8以后取消方法区,新增元空间,把原来方法区进行拆分,有点进入元空间,有点进入堆)"></a>(jdk8以后取消方法区,新增元空间,把原来方法区进行拆分,有点进入元空间,有点进入堆)</h4><p>本地方法栈:jvm在使用操作系统功能时使用,和开发无关</p><p>寄存器 : 给cpu使用,和开发无关</p><p>javabean类(实例类)</p><p>main类(测试类)</p><p><strong>封装:对象代表什么就得封装对应的数据,并提供数据对应的行为</strong></p><h2 id="一个对象的创建过程"><a href="#一个对象的创建过程" class="headerlink" title="一个对象的创建过程"></a>一个对象的创建过程</h2><p>1.加载class文件</p><p>2.申请局部变量</p><p>3.开辟堆空间</p><p>4.默认初始化</p><p>5.显示初始化</p><p>6.构造方法初始化</p><p>7.将堆内存中的地址值赋值给左边的局部变量</p><h1 id="this作用"><a href="#this作用" class="headerlink" title="this作用"></a>this作用</h1><p>区分局部变量和成员变量</p><p>this本质是方法调用者的地址值</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准javabean类</title>
      <link href="/2023/08/18/biao-zhun-javabean-lei/"/>
      <url>/2023/08/18/biao-zhun-javabean-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="标准javabean"><a href="#标准javabean" class="headerlink" title="标准javabean"></a>标准javabean</h1><p>1.类名见名知意</p><p>2.成员变量使用private修饰</p><p>3.至少使用两个构造方法</p><p>​1)无参构造</p><p>​2)带全部参数的构造</p><p>4.成员方法</p><p>​提供每一个成员变量对应的setXxx() / getXxx()</p><p>​如果有其它行为也需要写上</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaBean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法</title>
      <link href="/2023/08/18/gou-zao-fang-fa/"/>
      <url>/2023/08/18/gou-zao-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="构造方法作用"><a href="#构造方法作用" class="headerlink" title="构造方法作用:"></a>构造方法作用:</h4><p>​创建对象时,虚拟机自动调用,给成员变量进行初始化</p><h4 id="构造方法有几种-各自作用是什么"><a href="#构造方法有几种-各自作用是什么" class="headerlink" title="构造方法有几种?各自作用是什么?"></a>构造方法有几种?各自作用是什么?</h4><p>无参构造: 初始化对象成员变量均采用默认值</p><p>有参构造: 初始化对象时,同时可为对象赋值</p><h4 id="构造方法有哪些注意事项"><a href="#构造方法有哪些注意事项" class="headerlink" title="构造方法有哪些注意事项?"></a>构造方法有哪些注意事项?</h4><p>任何类定义出来默认自带无参数构造器,写不写都有</p><p>一旦定义了有参数构造器,无参构造器就没有了,此时就需要自己写无参数构造器了</p><p>建议在任何时候都写上空参和带全部参数的构造方法</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 构造方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或运算</title>
      <link href="/2023/08/15/yi-huo-yun-suan/"/>
      <url>/2023/08/15/yi-huo-yun-suan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">0^N = NN ^ N = 0交换律结合律<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="用异或的方式交换两个数"><a href="#用异或的方式交换两个数" class="headerlink" title="用异或的方式交换两个数"></a>用异或的方式交换两个数</h1><p>a[i] = a[i] * a[j];</p><p>a[j] = a[i] ^ a[j];</p><p>a[i] = a[i] ^ a[j];</p><h1 id="一组数-其余数有偶数次-只有一个数是有奇数次-的-求出这个数"><a href="#一组数-其余数有偶数次-只有一个数是有奇数次-的-求出这个数" class="headerlink" title="一组数,其余数有偶数次,只有一个数是有奇数次 的,求出这个数"></a>一组数,其余数有偶数次,只有一个数是有奇数次 的,求出这个数</h1><p>异或运算循环</p><h1 id="怎么把一个int类型的数提取出最右侧的1来"><a href="#怎么把一个int类型的数提取出最右侧的1来" class="headerlink" title="怎么把一个int类型的数提取出最右侧的1来"></a>怎么把一个int类型的数提取出最右侧的1来</h1><p>a&amp;((~a)+1)即a&amp;(-a)</p><h1 id="一个数组中有两种数出现了奇数次-其他数出现了偶数次-求出这两种数"><a href="#一个数组中有两种数出现了奇数次-其他数出现了偶数次-求出这两种数" class="headerlink" title="一个数组中有两种数出现了奇数次,其他数出现了偶数次,求出这两种数"></a>一个数组中有两种数出现了奇数次,其他数出现了偶数次,求出这两种数</h1><p>先循环,全部异或一遍,求出最后的数相当于奇数次 的两个数异或运算</p><p>之后得出一个数eor,求这个数eor二进制位上最右边为1的数a(见上问题)</p><p> 用一个数在数组中遍历,如果这个数与a与运算不为0,把数组的这个数与eor’进行异或运算</p><p>一遍遍历之后我们就得到了其中一个奇数</p><p>把这个奇数与eor进行位运算就得到了另一个奇数,很巧妙</p><h1 id="一个数组中有一种数出现k次-其他数都出现了M次-M-1-K"><a href="#一个数组中有一种数出现k次-其他数都出现了M次-M-1-K" class="headerlink" title="一个数组中有一种数出现k次,其他数都出现了M次,M>1,K<M,找到,出现了k次的数,要求:额外空间复杂度O(1),时间复杂度O(N)"></a>一个数组中有一种数出现k次,其他数都出现了M次,M&gt;1,K&lt;M,找到,出现了k次的数,要求:额外空间复杂度O(1),时间复杂度O(N)</h1><p>代码实现?</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 异或 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java语言自带排序</title>
      <link href="/2023/08/15/java-yu-yan-zi-dai-pai-xu/"/>
      <url>/2023/08/15/java-yu-yan-zi-dai-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>Arrays.sort(int[] a)<br>这种形式是对一个数组的所有元素进行排序，并且是按从小到大的顺序。</p><p>举例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>0 1 2 3 4 5 6 7 8 9</p><p>Arrays.sort(int[] a, int fromIndex, int toIndex)<br>这种形式是 对数组部分排序，也就是对数组a的下标从fromIndex到toIndex-1的元素排序，注意：下标为toIndex的元素不参与排序哦！</p><p>举例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找及对数器的使用</title>
      <link href="/2023/08/14/er-fen-cha-zhao-ji-dui-shu-qi-de-shi-yong/"/>
      <url>/2023/08/14/er-fen-cha-zhao-ji-dui-shu-qi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找及对数器检验"><a href="#二分查找及对数器检验" class="headerlink" title="二分查找及对数器检验"></a>二分查找及对数器检验</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Search</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样可以保证数组中的元素有正有负，且不超过maxValue。</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> testTimes <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">isExisted</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>success <span class="token operator">?</span> <span class="token string">"Nice"</span> <span class="token operator">:</span> <span class="token string">"Fucking fucked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExisted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*这段代码中，maxValue表示数组元素的最大绝对值，也就是说，数组中的元素的范围是-maxValue到maxValue之间。Math.random()方法会返回一个0到1之间的随机小数，所以(maxValue + 1) * Math.random()会返回一个0到maxValue + 1之间的随机小数。如果我们直接把这个小数转换成整数，那么我们得到的整数的范围是0到maxValue之间，而不是0到maxValue + 1之间。这样就会导致数组中的元素不能达到maxValue + 1这个值。为了让数组中的元素能够达到maxValue + 1这个值，我们需要在转换成整数之前，对这个小数加上0.5。这样，当这个小数大于或等于maxValue + 0.5时，转换成整数后就会变成maxValue + 1。然而，如果我们直接在(maxValue + 1) * Math.random()后面加上0.5，那么我们得到的小数的范围就会变成0.5到maxValue + 1.5之间。这样就会导致数组中的元素可能超过maxValue + 1这个值。为了避免这种情况，我们需要在(maxValue + 1) * Math.random()前面加上一个负号，然后再减去一个负号。这样，我们得到的小数的范围就会变成-maxValue - 1.5到-0.5之间。转换成整数后，就会变成-maxValue - 1到0之间。最后，我们再减去另一个(maxValue + 1) * Math.random()转换成整数后的值，就可以得到-maxValue - 1到maxValue + 1之间的随机整数了。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 对数器 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 对数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序及对数器的使用</title>
      <link href="/2023/08/14/pai-xu-ji-dui-shu-qi-de-shi-yong/"/>
      <url>/2023/08/14/pai-xu-ji-dui-shu-qi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="选择-冒泡-排序算法"><a href="#选择-冒泡-排序算法" class="headerlink" title="选择,冒泡,排序算法"></a>选择,冒泡,排序算法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cugbwfx<span class="token punctuation">.</span>javaMethod</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_SelectionSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArry</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>end <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span>end<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> newIndex <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>newIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                newIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> end <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> end<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> second<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//先想边界条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minValueIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/*if(arr[j]&lt;arr[min]){                    min = j;                }*/</span>                minValueIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>minValueIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minValueIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minValueIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArry</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对数器的使用-以检验排序算法为例"><a href="#对数器的使用-以检验排序算法为例" class="headerlink" title="对数器的使用,以检验排序算法为例"></a>对数器的使用,以检验排序算法为例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">randomLenRandomValue</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序算法有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 初学者 对数器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单排序 对数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同类型数据转二进制输出java</title>
      <link href="/2023/08/14/bu-tong-lei-xing-shu-ju-zhuan-er-jin-zhi-shu-chu-java/"/>
      <url>/2023/08/14/bu-tong-lei-xing-shu-ju-zhuan-er-jin-zhi-shu-chu-java/</url>
      
        <content type="html"><![CDATA[<h1 id="不同型数据转二进制输出"><a href="#不同型数据转二进制输出" class="headerlink" title="不同型数据转二进制输出"></a>不同型数据转二进制输出</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//将一个数以二进制形式输出</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num  <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制输出 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> java语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法及常数处理小技巧</title>
      <link href="/2023/08/14/er-fen-fa-ji-chang-shu-chu-li-xiao-ji-qiao/"/>
      <url>/2023/08/14/er-fen-fa-ji-chang-shu-chu-li-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="常数处理技巧-位运算"><a href="#常数处理技巧-位运算" class="headerlink" title="常数处理技巧(位运算)"></a>常数处理技巧(位运算)</h1><h5 id="R-L-2如果遇到19亿-20亿这样的数-会溢出"><a href="#R-L-2如果遇到19亿-20亿这样的数-会溢出" class="headerlink" title="(R+L)/2如果遇到19亿,20亿这样的数,会溢出"></a>(R+L)/2如果遇到19亿,20亿这样的数,会溢出</h5><p>所以用<strong>L+(R-L)/2</strong> 来防止溢出</p><p>而**(R-L)/2<strong>可以写为</strong>(R-L)&gt;&gt;1** </p><img src="C:\Users\10482\MyBlog\source\_posts\photo\壁纸.jpg" alt="壁纸" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
            <tag> 位运算处理(规避边界溢出) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对数器</title>
      <link href="/2023/08/14/dui-shu-qi/"/>
      <url>/2023/08/14/dui-shu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="生成随机数组"><a href="#生成随机数组" class="headerlink" title="生成随机数组"></a>生成随机数组</h1><h3 id="生成随机长度和随机值两个步骤"><a href="#生成随机长度和随机值两个步骤" class="headerlink" title="生成随机长度和随机值两个步骤"></a>生成随机长度和随机值两个步骤</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize <span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="随机数种子-Math-random"><a href="#随机数种子-Math-random" class="headerlink" title="随机数种子: Math.random()"></a>随机数种子: Math.random()</h5>]]></content>
      
      
      <categories>
          
          <category> 初学者 对数器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对数器 检验 随机数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从这个链接里面的博客学来的,保存一下链接防止以后找不着</title>
      <link href="/2023/08/13/cong-zhe-ge-lian-jie-li-mian-de-bo-ke-xue-lai-de-bao-cun-yi-xia-lian-jie-fang-zhi-yi-hou-zhao-bu-zhao/"/>
      <url>/2023/08/13/cong-zhe-ge-lian-jie-li-mian-de-bo-ke-xue-lai-de-bao-cun-yi-xia-lian-jie-fang-zhi-yi-hou-zhao-bu-zhao/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_58608526/article/details/124652412?spm=1001.2014.3001.5506">Hexo+Github博客搭建教程_hexo github_Cisyam-Leo的博客-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -&#39;博客搭建&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newdraft</title>
      <link href="/2023/08/13/newdraft/"/>
      <url>/2023/08/13/newdraft/</url>
      
        <content type="html"><![CDATA[<p> 这是一个草稿测试文章</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/08/13/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2023/08/13/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>1.2.1 网站<br>参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</p><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><p>1.2.2 网址<br>参数描述url网址root网站根目录 permalink文章的永久链接格式permalink_defaults永久链接中各部分的默认值</p><p>在这里，你需要把url改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是<a href="http://yoursite.com/2022/05/08/temp%E3%80%82">http://yoursite.com/2022/05/08/temp。</a></p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。</p><p>参数结果:year/:month/:day/:title/2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo/bar/hello-world</p><p>再往下翻，中间这些都默认就好了。</p><p>theme: landscap</p><p>theme就是选择什么主题，也就是在themes这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在themes文件夹下，再修改这个主题参数就可以了。</p><p>1.2.3 Front-matter<br>Front-matter 是md文件最上方以 —分隔的区域，用于指定个别文件的变量，举例来说：</p><p>title: Hexo+Github博客搭建记录<br>date: 2022-05-08 15:15:44</p><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数描述layout布局title标题date建立日期updated更新日期comments开启文章的评论功能tags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址</p><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说Foo，Bar不等于Bar，Foo；而标签没有顺序和层次。</p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo+Github博客搭建记录date: author: img: /medias/banner/7.jpgcoverImg: /medias/banner/7.jpgtop: truecover: truetoc: truepassword: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: truesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2.4 layout（布局）<br>1.2.4.1 post</p><p>当你每一次使用代码</p><p>hexo new XXX</p><p>它其实默认使用的是post这个布局，也就是在source文件夹下的_post里面。</p><p>Hexo有三种默认布局：post、page和draft，它们分别对应不同的路径，而您自定义的其他布局和post相同，都将储存到source/_posts文件夹。</p><p>而new这个命令其实是：</p><p>hexo new [layout] <title>&lt;/p&gt;&lt;p&gt;只不过这个layout默认是post罢了。&lt;/p&gt;&lt;p&gt;2.4.2 page&lt;/p&gt;&lt;p&gt;如果你想另起一页，那么可以使用&lt;/p&gt;&lt;p&gt;hexo new page newpage&lt;/p&gt;&lt;p&gt;系统会自动给你在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，这样你访问的newpage对应的链接就是&lt;a href="http://xxx.xxx/newpage"&gt;http://xxx.xxx/newpage&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2.4.3 draft&lt;/p&gt;&lt;p&gt;draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以&lt;/p&gt;&lt;p&gt;hexo new draft newdraft&lt;/p&gt;&lt;p&gt;这样会在source/_draft中新建一个newdraft.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用&lt;/p&gt;&lt;p&gt;hexo server –draft&lt;/p&gt;&lt;p&gt;在本地端口中开启服务预览。&lt;/p&gt;&lt;p&gt;如果你的草稿文件写完了，想要发表到post中，&lt;/p&gt;&lt;p&gt;hexo publish draft newdraft&lt;/p&gt;&lt;p&gt;就会自动把newdraft.md发送到post中。&lt;/p&gt;</title></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/13/hello-world/"/>
      <url>/2023/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
