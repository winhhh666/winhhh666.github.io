<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cpp高级函数特性</title>
      <link href="/2023/09/20/cpp-gao-ji-han-shu-te-xing/"/>
      <url>/2023/09/20/cpp-gao-ji-han-shu-te-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="c-初始化"><a href="#c-初始化" class="headerlink" title="c++初始化"></a>c++初始化</h3><p>c++ 初始化 的花括号{}初始化方式为列表初始化</p><p>较为严格:初始化时不允许信息的丢失</p><h3 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h3><p>const int p = 9;</p><p>常量表达式是编译时确定的</p><h3 id="constexpr-关键字"><a href="#constexpr-关键字" class="headerlink" title="constexpr 关键字"></a>constexpr 关键字</h3><h3 id="四种细分显示转化语法"><a href="#四种细分显示转化语法" class="headerlink" title="四种细分显示转化语法"></a>四种细分显示转化语法</h3><p>static_cast </p><p>dynamic_cast</p><p>const_cast</p><p>reinterpret_cast</p><p>简单的io流控制</p><p>dec</p><p>hex oct ws endl setprecision(int) setw(int) </p><h3 id="for-声明-表达式"><a href="#for-声明-表达式" class="headerlink" title="for(声明, 表达式)"></a>for(声明, 表达式)</h3><p>如果进行写操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s = "abcd";for(auto &amp;r: s) r+=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>返回引用的函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream.h&gt;int a[] = {232,434,34,34};int&amp; index(int i);void main() {    index(3) = 16;    cout &lt;&lt; "index(3) is :" &lt;&lt; index(3) &lt;&lt; endl;    cout &lt;&lt; "   a[3] is :" &lt;&lt; a[3] &lt;&lt; endl;}int&amp; index(int i){    return a[i];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数可以定义默认形参值"><a href="#函数可以定义默认形参值" class="headerlink" title="函数可以定义默认形参值"></a>函数可以定义默认形参值</h3><h3 id="type-using"><a href="#type-using" class="headerlink" title="type using"></a>type using</h3><h3 id="auto类型与decltype类型"><a href="#auto类型与decltype类型" class="headerlink" title="auto类型与decltype类型"></a>auto类型与decltype类型</h3>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/09/15/shu-ju-jie-gou/"/>
      <url>/2023/09/15/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>1.存储数据</p><p>2.存储数据表的长度</p><p>3.记录存储容量</p><h2 id="c语言定义结构体来表示顺序表"><a href="#c语言定义结构体来表示顺序表" class="headerlink" title="c语言定义结构体来表示顺序表"></a>c语言定义结构体来表示顺序表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> Table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建顺序表"><a href="#创建顺序表" class="headerlink" title="创建顺序表"></a>创建顺序表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Size</span> <span class="token expression"><span class="token number">5</span> </span><span class="token comment">//宏定义,表示最大存储容量</span></span><span class="token keyword">void</span> <span class="token function">initTable</span><span class="token punctuation">(</span>Table <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//构造空表,动态申请内存空间</span>    t<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>Size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如申请失败,作出提示并直接退出程序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t <span class="token operator">-&gt;</span> head<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//空表长度初始化为0</span>    t<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//空表初始存储空间</span>    t<span class="token operator">-&gt;</span>size <span class="token operator">=</span> Size<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序表使用"><a href="#顺序表使用" class="headerlink" title="顺序表使用"></a>顺序表使用</h2><p>创建顺序表并存储元素{1, 2, 3, 4, 5};</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Size</span> <span class="token expression"><span class="token number">5</span> </span><span class="token comment">// 对Size进行宏定义,表示顺序表的最大容量</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">initTable</span><span class="token punctuation">(</span>Table <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>Size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果申请失败,作出提示并直接退出</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t <span class="token operator">-&gt;</span> head<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* 该程序中，exit(0)的作用是什么，为何要有这一句？ 展开Exit() 是电脑函数。函数名: exit()所在头文件：stdlib.h功 能: 关闭所有文件，终止正在执行的进程。exit(1)表示异常退出.这个1是返回给操作系统的。exit(x)（x不为0）都表示异常退出exit(0)表示正常退出exit()的参数会被传递给一些操作系统，包括UNIX,Linux,和MS DOS，以供其他程序使用。stdlib.h: void exit(int status);参 数 : status //程序退出的返回值.*/</span>    <span class="token punctuation">}</span>    t<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    t<span class="token operator">-&gt;</span>size <span class="token operator">=</span> Size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出顺序表中元素的函数</span><span class="token keyword">void</span> <span class="token function">displayTable</span><span class="token punctuation">(</span>Table t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Table t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表中存储的元素分别是: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">displayTable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放申请的堆内存</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>数据域|指针域</p><p>c语言用结构体表示链表中的结点,</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">link</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> elem<span class="token punctuation">;</span><span class="token comment">//数据域</span>    <span class="token keyword">struct</span> <span class="token class-name">link</span><span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//代表指针域,指向直接后继元素</span><span class="token punctuation">}</span>Link<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>//习惯将结点中的指针命名为next,因此指针域又被称为Next域</p><p>地标指针</p><p>串连指针</p><h3 id="创建一个不含头节点的链表"><a href="#创建一个不含头节点的链表" class="headerlink" title="创建一个不含头节点的链表"></a>创建一个不含头节点的链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Link<span class="token operator">*</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">//1.创建头指针</span>    Link<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//2.创建首元结点</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token comment">//每创建一个结点,都令其直接前驱结点指向它</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个结点</span>        Link<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         a<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> i<span class="token punctuation">;</span>    a<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp <span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建含有头节点的链表"><a href="#创建含有头节点的链表" class="headerlink" title="创建含有头节点的链表"></a>创建含有头节点的链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Link<span class="token operator">*</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>       <span class="token comment">//创建头指针的同时创建头结点</span>    Link<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">-&gt;</span> elem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    head <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//创建串联指针</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Link<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> i<span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">//每次 temp 指向的结点就是a的直接前驱结点</span>        temp <span class="token operator">-&gt;</span> next <span class="token operator">=</span> a<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-含有头节点-插入元素"><a href="#链表-含有头节点-插入元素" class="headerlink" title="链表(含有头节点)插入元素"></a>链表(含有头节点)插入元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insertElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//创建临时结点temp</span>    <span class="token comment">//首先要找到插入位置的上一个结点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> add<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">-&gt;</span> elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>    c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-无头节点-插入元素"><a href="#链表-无头节点-插入元素" class="headerlink" title="链表(无头节点)插入元素"></a>链表(无头节点)插入元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Link<span class="token operator">*</span> <span class="token function">insertElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> elem<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>add <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建插入结点c</span>        Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        Link<span class="token operator">*</span> temp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//创建临时结点temp;</span>        <span class="token comment">//首先找到要插入位置的上一个结点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> add<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置无效\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建插入结点c</span>        c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>        c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-带头节点-删除元素"><a href="#链表-带头节点-删除元素" class="headerlink" title="链表(带头节点)删除元素"></a>链表(带头节点)删除元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为原链表,elem为要删除的目标元素</span><span class="token keyword">int</span> <span class="token function">delElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> del <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>temp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> find <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//1,找到目标元素的直接前驱结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            find <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>find <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//删除失败</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment">//标记要删除的结点</span>        del <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表-不带头节点-删除元素"><a href="#链表-不带头节点-删除元素" class="headerlink" title="链表(不带头节点)删除元素"></a>链表(不带头节点)删除元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为原链表,elem为要删除的目标元素</span><span class="token keyword">int</span> <span class="token function">delElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> del <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment">//删除首元结点需要单独考虑</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> find <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//找到目标元素直接前驱结点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>                find <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>find<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//删除失败</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment">//标记要删除的结点</span>            del <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token comment">//将,目标结点从链表上摘除</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数返回1时, 表示删除成功;返回-1,表示删除失败.注意,该函数的形参p为二级指针,调用时需要传递链表头指针的地址</p><h3 id="链表查找元素"><a href="#链表查找元素" class="headerlink" title="链表查找元素"></a>链表查找元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为原链表,elem表示被查找元素</span><span class="token keyword">int</span> <span class="token function">selectElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//带头节点,p指向首元结点</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//返回-1,表示未找到</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不带头节点的链表注释掉第五行</p><h3 id="链表更新元素"><a href="#链表更新元素" class="headerlink" title="链表更新元素"></a>链表更新元素</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//p为有头节点的链表,oldElem为旧元素,newElem为新元素</span><span class="token keyword">int</span> <span class="token function">amendElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> oldElem<span class="token punctuation">,</span> <span class="token keyword">int</span> newElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> oldElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> newElem<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回1,表示成功;返回-1,表示失败.如果是没有头结点,注释掉第三行</p><h3 id="对有头节点的链表实现增删查改"><a href="#对有头节点的链表实现增删查改" class="headerlink" title="对有头节点的链表实现增删查改"></a>对有头节点的链表实现增删查改</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">incldue</span><span class="token expression"><span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span><span class="token comment">//链表中结点的结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">link</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> elem<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">link</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>Link<span class="token punctuation">;</span>Link<span class="token operator">*</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Link<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个结点</span>        Link<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> i<span class="token punctuation">;</span>        a<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insertElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Link<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Link<span class="token operator">*</span> temp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> add<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置无效\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>    c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">delElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> del <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>temp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> find <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            find <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>find <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        del <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">selectElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">amendElem</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> oldElem<span class="token punctuation">,</span> <span class="token keyword">int</span> newElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elem <span class="token operator">==</span> oldElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-&gt;</span>elem <span class="token operator">=</span> newElem<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">diaplay</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;d"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Link_free</span><span class="token punctuation">(</span>Link<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span> fr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        fr <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Link<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">initLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化链表为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在第3的位置上添加元素6:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除元素4:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查找元素 2:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"元素2的位置为: %d\n"</span><span class="token punctuation">,</span> <span class="token function">selectElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更元素1的值为6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">amendElem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Link_free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表反转的四种方法-无头节点实现版"><a href="#链表反转的四种方法-无头节点实现版" class="headerlink" title="链表反转的四种方法(无头节点实现版)"></a>链表反转的四种方法(无头节点实现版)</h3><h4 id="迭代反转法-可有头结点可无"><a href="#迭代反转法-可有头结点可无" class="headerlink" title="迭代反转法(可有头结点可无)"></a>迭代反转法(可有头结点可无)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//迭代反转法,head为无头节点的头指针</span>link<span class="token operator">*</span> <span class="token function">iteration_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        link<span class="token operator">*</span> beg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        link<span class="token operator">*</span> mid <span class="token operator">=</span> head<span class="token punctuation">;</span>        link<span class="token operator">*</span> end <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token comment">//一直遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//修改mid所指节点的指向</span>mid<span class="token operator">-&gt;</span>next <span class="token operator">=</span> beg<span class="token punctuation">;</span>            <span class="token comment">//此时判断end是否为NULL, 如果成立则退出循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//整体向后移动3个指针</span>            beg <span class="token operator">=</span> mid<span class="token punctuation">;</span>            mid <span class="token operator">=</span> end<span class="token punctuation">;</span>            end <span class="token operator">=</span> end<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//最后修改head头指针的指向</span>        head <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="递归实现链表反转-可头可不头-但是带头节点麻烦"><a href="#递归实现链表反转-可头可不头-但是带头节点麻烦" class="headerlink" title="递归实现链表反转(可头可不头,但是带头节点麻烦)"></a>递归实现链表反转(可头可不头,但是带头节点麻烦)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">link<span class="token operator">*</span> <span class="token function">recursive_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//递归的出口</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//空链表或只有一个结点,直接返回头指针</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment">//一直递归,找到链表中最后一个结点</span>        link<span class="token operator">*</span> new_head <span class="token operator">=</span> <span class="token function">recursive_reverse</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当逐层退出时, new_head 的指向都不变,一直指向原链表中最后一个结点</span>        <span class="token comment">//递归每退出一层,函数中head的指向都会发生改变,都指向上一个结点</span>        <span class="token comment">//每退出一层,都需要改变head-&gt;next结点指针域的指向,同时令head所指节点的 指针域为NULL</span>        head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">//每一层递归结束都要将新的头指针返回给上一层</span>        <span class="token keyword">return</span> new_head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">link<span class="token operator">*</span> <span class="token function">head_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> new_head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new_head<span class="token punctuation">;</span>        new_head <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> new_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="就地逆置"><a href="#就地逆置" class="headerlink" title="就地逆置"></a>就地逆置</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">link<span class="token operator">*</span> <span class="token function">local_reverse</span><span class="token punctuation">(</span>link<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> beg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    link<span class="token operator">*</span> end <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    beg <span class="token operator">=</span> head<span class="token punctuation">;</span>    end <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>beg<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        beg<span class="token operator">-&gt;</span>next <span class="token operator">=</span> end<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        end<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> end<span class="token punctuation">;</span>        end <span class="token operator">=</span> beg<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就地逆置:先把一个反转逻辑粗糙的写出来,然后优化,关键是要想出指针的骚操作</p><h3 id="判断链表相交"><a href="#判断链表相交" class="headerlink" title="判断链表相交"></a>判断链表相交</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> elem<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Link</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>link<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>开始判断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//自定义bool类型</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">bool</span><span class="token punctuation">{</span>    False <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    True <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>bool<span class="token punctuation">;</span><span class="token comment">//L1和L2为2个单链表, 函数返回True表示链表相交,返回False表示不相交</span>bool <span class="token function">LinkIntersect</span><span class="token punctuation">(</span>link<span class="token operator">*</span> L1<span class="token punctuation">,</span> link<span class="token operator">*</span> L2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> p1 <span class="token operator">=</span> L1<span class="token punctuation">;</span>    link<span class="token operator">*</span> p2 <span class="token operator">=</span> L2<span class="token punctuation">;</span>    <span class="token comment">//逐个遍历L1链表中的各个节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//遍历L2链表,针对每个p1,依次和p2所指节点作比较</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//p1,p2中记录的就是各个节点的存储地址,直接比较即可</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> True<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p2 <span class="token operator">=</span> p2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化一"><a href="#优化一" class="headerlink" title="优化一:"></a>优化一:</h4><h5 id="实际上，第-1-种实现方案还可以进一步优化。结合图-1②，2-个单链表相交有一个必然结果，即这-2-个链表-的最后一个节点必定相同；反之，如果-2-个链表不相交，则这-2-个链表的最后一个节点必定不相同。"><a href="#实际上，第-1-种实现方案还可以进一步优化。结合图-1②，2-个单链表相交有一个必然结果，即这-2-个链表-的最后一个节点必定相同；反之，如果-2-个链表不相交，则这-2-个链表的最后一个节点必定不相同。" class="headerlink" title="实际上，第 1 种实现方案还可以进一步优化。结合图 1②，2 个单链表相交有一个必然结果，即这 2 个链表 的最后一个节点必定相同；反之，如果 2 个链表不相交，则这 2 个链表的最后一个节点必定不相同。"></a>实际上，第 1 种实现方案还可以进一步优化。结合图 1②，2 个单链表相交有一个必然结果，即这 2 个链表 的最后一个节点必定相同；反之，如果 2 个链表不相交，则这 2 个链表的最后一个节点必定不相同。</h5><p>利用判断最后一个节点的方法判断相交</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">LinkIntersect</span><span class="token punctuation">(</span>link<span class="token operator">*</span> L1<span class="token punctuation">,</span> link<span class="token operator">*</span> L2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> p1 <span class="token operator">=</span> L1<span class="token punctuation">;</span>    link<span class="token operator">*</span> p2 <span class="token operator">=</span> L2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p2 <span class="token operator">=</span> p2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> True<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过优化.时间复杂度缩小为O(n)</p><h4 id="优化二"><a href="#优化二" class="headerlink" title="优化二:"></a>优化二:</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">LinkIntersect</span><span class="token punctuation">(</span>link<span class="token operator">*</span> L1<span class="token punctuation">,</span> link<span class="token operator">*</span> L2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    link<span class="token operator">*</span> plong <span class="token operator">=</span> L1<span class="token punctuation">;</span>    link<span class="token operator">*</span> pshort <span class="token operator">=</span> L2<span class="token punctuation">;</span>    link<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num2  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>plong<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num1<span class="token operator">++</span><span class="token punctuation">;</span>        plong <span class="token operator">=</span> plong<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pshort<span class="token punctuation">)</span> <span class="token punctuation">}</span>        num2<span class="token operator">++</span><span class="token punctuation">;</span>        pshort <span class="token operator">=</span> pshort<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//重置plong和pshort,使plong代表较长的链表,pshort代表较短 的链表</span>plong <span class="token operator">=</span> L1<span class="token punctuation">;</span>pshort <span class="token operator">=</span> L2<span class="token punctuation">;</span>step <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>plong <span class="token operator">=</span> L2<span class="token punctuation">;</span>     pshort <span class="token operator">=</span> L1<span class="token punctuation">;</span>        step <span class="token operator">=</span> num2 <span class="token operator">-</span>num1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//在plong链表中找到和pshort等长度的子链表</span>   temp <span class="token operator">=</span> plong<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        step<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;&amp;</span> pshort<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> pshort<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> True<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        pshort <span class="token operator">=</span> pshort<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点分析;:</p><p>可以找到2个单链表相交的交点(也就是相交时的第一个交点),也就是使LinkIntersect()函数返回True时的temp指针指向的那个节点.另外,此方案的时间复杂度也为O(n)</p><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>数据域 游标</p><p>c语言实现节点</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> date<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>component<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>静态链表中,除了数据本身通过游标组成的链表外,还需要有一条连接各个空闲位置的链表,称为备用链表</p><p>备用链表的作用是回收数组中未使用或之前使用过(目前未使用) 的存储空间,留待后期使用.也就是说,静态链表使用数组申请的物理空间中,存有两个链表,一条连接数据,另一条连接数组中未使用的空间</p><p><strong>通常备用链表的表头位于数组下标为0(a[0])的位置,而数据链表的表头位于数组下标为1(a[1])的位置</strong></p><p>静态链表中设置备用链表的好处是,可以清楚的知道数组是否有空闲位置,以便数据链表添加新数据时使用.比如, 若静态链表中数组下标为0的位置上存有数据,则证明数组已满</p><p>例如使用静态链表存储{1,2,3} , 假设使用长度为6的数组a,则存储状态</p><p>备用链表上连接的依次是a[0]. a[2] . a[4].而数据链表上连接的依次是a[1].  a[3] 和a[5]</p><h4 id="创建静态链表c语言实现"><a href="#创建静态链表c语言实现" class="headerlink" title="创建静态链表c语言实现"></a>创建静态链表c语言实现</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxSize</span> <span class="token expression"><span class="token number">6</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> date<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>component<span class="token punctuation">;</span><span class="token comment">//将结构体数组中所有分量连接到备用链表中</span><span class="token keyword">void</span> <span class="token function">reserveArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> arry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化静态链表</span><span class="token keyword">int</span> <span class="token function">initArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> arry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">displayAr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从备用链表上摘下空闲节点的函数</span><span class="token keyword">int</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    component array<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> body <span class="token operator">=</span> <span class="token function">initArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"静态链表为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">displayArr</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建备用链表</span><span class="token keyword">void</span> <span class="token function">reserveArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将每个数组分量链接到一起</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    array<span class="token punctuation">[</span>maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//链表最后一个结点的游标值为0</span><span class="token punctuation">}</span><span class="token comment">//提取分配空间</span><span class="token keyword">int</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//若备用链表非空, 则返回分配的结点下标,否则返回0(当分配到最后一个结点时,该结点的游标值为0)</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//初始化静态链表</span><span class="token keyword">int</span> <span class="token function">initArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tempBody <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">reserveArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    body <span class="token operator">=</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//建立首元结点</span>    array<span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//声明一个变量,把它当指针使, 指向链表的最后的一个结点,当前和首元结点重合</span>    tempBody <span class="token operator">=</span> body<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">mallocArr</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从备用链表中拿出空闲的分量</span>        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//初始化新得到的 空间结点</span>        array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//将新得到的结点链接到数据链表的尾部</span>        tempBody <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 将指向链表最后一个节点的指针后移</span>    <span class="token punctuation">}</span>    array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//新链表最后一个结点的指针设置为0</span>    <span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">displayArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tempBody <span class="token operator">=</span> body<span class="token punctuation">;</span><span class="token comment">//tempBody准备做遍历使用</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        tempBody <span class="token operator">=</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> array<span class="token punctuation">[</span>tempBody<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链表插入元素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//body表示链表头节点所在的位置,add表示插入元素的位置,num表示要插入的数据</span><span class="token keyword">int</span> <span class="token function">insertArr</span><span class="token punctuation">(</span>component<span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> body<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tempBody <span class="token operator">=</span> body<span class="token punctuation">;</span><span class="token comment">//tempBody做遍历结构体数组使用</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> insert <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构(c语言) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言头文件</title>
      <link href="/2023/09/12/c-yu-yan-tou-wen-jian/"/>
      <url>/2023/09/12/c-yu-yan-tou-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>  什么情况下用&lt;&gt;, 什么情况下用””</p><p>(1)如果是系统头文件,string.h , stdlib.h等,&lt;&gt;</p><p>(2)如果是独立的第三方模块安装的 &lt;&gt; 比如 mysql.h</p><p>(3)如果是自己项目的头文件, 一定使用””</p><p>为什么不全部用”” , 而还要混合&lt;&gt; 来自寻烦恼呢?</p><p>​1&gt;加快编译器搜索头文件的速度</p><p>​2&gt;方便维护</p><p>可以知道是不是自己做的</p><h3 id="头文件代码模块"><a href="#头文件代码模块" class="headerlink" title="头文件代码模块"></a>头文件代码模块</h3><p>不给外部模块用的函数一定不要写到头文件里面</p><p>头文件一定要写上防止重复包含</p><p>不要在头文件里面定义全局变量,如果有两个模块都包含了这个头文件,那么就会定义两次全局变量,那么会重复定义</p><p>“”三种方式:</p><p>主程序所在文件夹:自己写的</p><p>库函数</p><p>第三方库</p><p>&lt;&gt;两种方式</p>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言字符与字符串</title>
      <link href="/2023/09/12/c-yu-yan-zi-fu-yu-zi-fu-chuan/"/>
      <url>/2023/09/12/c-yu-yan-zi-fu-yu-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p> c语言字符串是以’\0’结尾</p><p>‘\0’即0</p><p>字符串内存除了存放数据以外,还要存放结束符,所以内存要+1</p><p>字符串的定义</p><p>(1)常量字符串定义,一旦定义常驻内存,不可修改</p><p>(2)全局的,只读的,不可修改的,分配在代码段上</p><p>有一个char*的指针变量指向这个常量字符串</p><p>指向字符串内存第一个字符的首地址</p><p>在代码段上定义一个常量字符串,并有一个指针变量☞过去</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str_ptr <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str_ptr<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//llo</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有多个地方使用同一个常量字符串那么他们是同一块内存</p><p>验证</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str_ptr2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x  0x%x"</span><span class="token punctuation">,</span> str_ptr <span class="token punctuation">,</span> str_ptr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>//常量字符串定义在代码段上的,  –&gt;只读的</p><p>str_ptr2[0] =’y’;  //会报错,因为是受保护的内存</p><p>非常量字符串<br>内存,内容<br>hello</p><p>char str_data[5+1]  = {‘H’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\0’};</p><p>char str_data[5+1] = “hello”;</p><p>char str_data3[] = “helloworld”;</p><p>//动态内存分配</p><p>char* str_data4= malloc(10+1);</p><p>char* str = (char * ) malloc(15); 如果不加malloc前面不加(char*)会有影响吗</p><p><a href="https://www.zhihu.com/question/280418752">不加(char*)的影响取决于你使用的编译器和C标准。在C89标准中，malloc返回的是void<em>类型的指针，这种指针可以隐式转换为任何其他类型的指针，所以不需要强制类型转换。但是在C99和C11标准中，malloc返回的还是void</em>类型的指针，但是这种指针不能隐式转换为其他类型的指针，所以需要强制类型转换。如果不加(char*)，可能会导致编译器报警告或错误</a><a href="https://www.zhihu.com/question/280418752">1</a><a href="https://www.zhihu.com/question/399399009">2</a><a href="https://zhidao.baidu.com/question/1673888175226093307.html">3</a>。</p><p><a href="https://blog.csdn.net/SillyGOAT/article/details/121330462">另外，如果你使用的是C++编译器，那么malloc返回的void<em>类型的指针也不能隐式转换为其他类型的指针，所以也需要强制类型转换。如果不加(char</em>)，会导致编译错误</a><a href="https://blog.csdn.net/SillyGOAT/article/details/121330462">4</a>。</p><p>总之，为了保证代码的可移植性和规范性，建议你在malloc前面加上(char*)。</p><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str_data4<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str_data4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token char">'H'</span><span class="token punctuation">;</span>str_data4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'e'</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> src <span class="token operator">=</span> <span class="token string">"Helloworld"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>str_data4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> str_data4<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//'\0'</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str_data4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>str_data4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存:全局的(常字符串),栈上的,堆上的</p><p>统计字符串字符字数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> walk <span class="token operator">=</span> ptr<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>walk <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        walk<span class="token operator">++</span><span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串copy</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> src_ptr <span class="token operator">=</span> <span class="token string">"helloworld!!"</span><span class="token punctuation">;</span><span class="token keyword">char</span> dst_ptr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">my_strcpy</span><span class="token punctuation">(</span>dst_ptr<span class="token punctuation">,</span> src_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">my_strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token punctuation">;</span>        dst<span class="token operator">++</span><span class="token punctuation">;</span>        src<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你使用指针访问内存时,内存多大要清楚,否则运行时会报错</p><p>函数my_strcmp(char* str1, char* str2);</p><p>要判断是否会越界之类的</p><p>大写字符二进制值小于小写</p><p>字符串操作函数</p><p>printf(“%s”);%s格式化输出一个字符串,把字符串内容打印出来</p><p>strlen(字符串首地址); 返回字符串的长度(一个字符串包含字符的个数)</p><p>strcpy(目标内存地址, 字符串首地址);</p><p>strcmp(左边字符串对象, 右边字符串对象),判断是否==0 相等</p><p>strncpy(目标字符串地址,已有字符串, 个数n)拷贝指定的字符个数到目标地址,(<strong>记得在目标字符串尾加上0</strong>)</p><p>strncmp:比较特定个数的字符串</p><p>strdup:复制一个字符串对象:内存分配到堆上(内部调用malloc), 不用了,用free释放</p><p>数组名字,sizeof(数组名字)返回的是数组的大小</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>头文件怎么制作</title>
      <link href="/2023/09/10/tou-wen-jian-zen-me-zhi-zuo/"/>
      <url>/2023/09/10/tou-wen-jian-zen-me-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MY_MATH_H_</span><span class="token comment">//防止重复包含</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MY_MATH_H_</span></span><span class="token comment">//如果这个函数可以公布给给别人使用,那么可以把这个函数接口</span><span class="token comment">//申明到头文件</span><span class="token keyword">int</span> <span class="token function">math_abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">math_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存操作函数_宏_条件编译_代码模块</title>
      <link href="/2023/09/10/nei-cun-cao-zuo-han-shu-hong-tiao-jian-bian-yi-dai-ma-mo-kuai/"/>
      <url>/2023/09/10/nei-cun-cao-zuo-han-shu-hong-tiao-jian-bian-yi-dai-ma-mo-kuai/</url>
      
        <content type="html"><![CDATA[<p>char* ptr = (int*)malloc(100);</p><p>memset(ptr , 0x0 , 100);</p><p>memmove一个一个来的 ,比较安全</p><p>memcopy大段</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++引用</title>
      <link href="/2023/09/08/c-yin-yong/"/>
      <url>/2023/09/08/c-yin-yong/</url>
      
        <content type="html"><![CDATA[<p> 引用和指针的区别.</p><p>指针存储的是一块内存的地址,通过地址,可以访问这块内存<br>引用是一个变量的别名,在创建时必须初始化</p><p>引用在初始化之后不可变,指针可以修改指向的对象</p><pre class="line-numbers language-none"><code class="language-none">int *p = &amp;a;//初始化指针p,指向a的地址int &amp;r = a;//给a取一个别名r,可以说r就是a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指针写法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void swap(int *a,int *b){int tmp;tmp = *a;*a = *b;*b = tmp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用写法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void swap(int &amp;a,int &amp;b){int tmp;tmp = a;a = b;b = tmp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static修饰符</title>
      <link href="/2023/09/05/static-xiu-shi-fu/"/>
      <url>/2023/09/05/static-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<p> static修饰的全局变量只能在当前.c文件中访问,减少代码维护成本</p><p>static修饰的局部变量只能在声明的函数中使用,不随函数的结束而释放</p>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范与整洁</title>
      <link href="/2023/09/05/dai-ma-gui-fan-yu-zheng-ji/"/>
      <url>/2023/09/05/dai-ma-gui-fan-yu-zheng-ji/</url>
      
        <content type="html"><![CDATA[<p> 注意tab缩进</p><p>注意类似for里面的缩进</p><p>注意每个单独逻辑之间用空行分开</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见程序英文缩写</title>
      <link href="/2023/09/05/chang-jian-cheng-xu-ying-wen-suo-xie/"/>
      <url>/2023/09/05/chang-jian-cheng-xu-ying-wen-suo-xie/</url>
      
        <content type="html"><![CDATA[<p> i -&gt; index</p><p>pointer -&gt; ptr</p><p>source –&gt; src</p><p>function -&gt; func</p><p>left hand side-&gt;lhs</p><p>right hand side -&gt; rhs</p><p>stand -&gt; std</p><p>memory -&gt;mem</p><p>library -&gt; lib</p><p>input/output -&gt; io</p><p>file stream -&gt; fs</p><p>file open -&gt; fopen</p><p>header -&gt; h</p>]]></content>
      
      
      <categories>
          
          <category> 程序员英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种命名方法</title>
      <link href="/2023/09/05/san-chong-ming-ming-fang-fa/"/>
      <url>/2023/09/05/san-chong-ming-ming-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>1.linux命名法</p><p>test_func</p><p>2.驼峰命名法</p><p>testFunc</p><p>3.微软匈牙利命名法</p><p>TestFunc</p>]]></content>
      
      
      
        <tags>
            
            <tag> 变量命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argc与argv-c语言main函数中参数的意义</title>
      <link href="/2023/09/05/argc-yu-argv-c-yu-yan-main-han-shu-zhong-can-shu-de-yi-yi/"/>
      <url>/2023/09/05/argc-yu-argv-c-yu-yan-main-han-shu-zhong-can-shu-de-yi-yi/</url>
      
        <content type="html"><![CDATA[<p> argc:argument count</p><p>argv: argument value字符串数组</p>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS头文件不同符号的区别和使用</title>
      <link href="/2023/09/01/vs-tou-wen-jian-bu-tong-fu-hao-de-qu-bie-he-shi-yong/"/>
      <url>/2023/09/01/vs-tou-wen-jian-bu-tong-fu-hao-de-qu-bie-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>​包含头文件的方式</p><h4 id="No-1-include"><a href="#No-1-include" class="headerlink" title="No.1 #include<stdio.h>"></a>No.1 #include&lt;stdio.h&gt;</h4><p>//在标准库的目录下查找</p><h4 id="No-2-include”xxx-h”"><a href="#No-2-include”xxx-h”" class="headerlink" title="No.2#include”xxx.h”"></a>No.2#include”xxx.h”</h4><p>//先在标准库目录下找,按照路径的方式查找</p><h4 id="No-3-路径"><a href="#No-3-路径" class="headerlink" title="No.3 路径"></a>No.3 路径</h4><p>//绝对路径:带盘符</p><p>#include”F:/fhead.h”</p><p>//相对路径不带盼复</p><p>#includue “myHead.h”</p><p>#include”xxx\ \mm.h”\一般路径用反斜杠或者 \ \</p><p>#include&lt;xxx.h&gt;</p><p>//无法打开包括文件:”xxx.h”: No such file or directory</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS </tag>
            
            <tag> 头文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器指令与汇编语言</title>
      <link href="/2023/08/31/ji-qi-zhi-ling-yu-hui-bian-yu-yan/"/>
      <url>/2023/08/31/ji-qi-zhi-ling-yu-hui-bian-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="机器指令与汇编语言"><a href="#机器指令与汇编语言" class="headerlink" title="机器指令与汇编语言"></a>机器指令与汇编语言</h1><h3 id="1-cpu指令体系"><a href="#1-cpu指令体系" class="headerlink" title="1.cpu指令体系:"></a>1.cpu指令体系:</h3><p>cpu有一个指令集的规范,怎样向cpu下达指令</p><p>每种类型cpu都有统一指令集的规范,不同厂家生产的同类型cpu指令基本是兼容的 </p><p>计算机只有二进制数据0,1,所以每条机器指令是由一串二进制组成</p><p>每条指令都有一个二进制模板,这个模板定义在cpu指令集里</p><h3 id="2-机器代码"><a href="#2-机器代码" class="headerlink" title="2.机器代码"></a>2.机器代码</h3><p>完成一个特定功能的,一连串机器指令的集合</p><p>cpu一条一条指令执行这些机器代码,完成特定的功能</p><h3 id="3-程序"><a href="#3-程序" class="headerlink" title="3.程序"></a>3.程序</h3><p>编写指令给cpu,让他完成特定的功能</p><h3 id="4-汇编语言"><a href="#4-汇编语言" class="headerlink" title="4.汇编语言"></a>4.汇编语言</h3><p>指令助记符号,帮助我们记忆和使用指令模板,大大降低程序的编写复杂度和阅读困难</p>]]></content>
      
      
      <categories>
          
          <category> 游戏服务器开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器指令与汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office软件页面变成灰色</title>
      <link href="/2023/08/31/office-ruan-jian-bian-cheng-hui-se/"/>
      <url>/2023/08/31/office-ruan-jian-bian-cheng-hui-se/</url>
      
        <content type="html"><![CDATA[<p> 进入选项-&gt;常规-&gt;个性化设置</p>]]></content>
      
      
      <categories>
          
          <category> 故障 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>套接字Socket</title>
      <link href="/2023/08/30/tao-jie-zi-socket/"/>
      <url>/2023/08/30/tao-jie-zi-socket/</url>
      
        <content type="html"><![CDATA[<p> <strong>套接字</strong> </p><p>网络连接的每一端都需要存储一些信息，这些信息至少包括：<strong>连 接使用的协议</strong>、<strong>自己的地址</strong>、<strong>对方的地址</strong>、<strong>将要发送的数据</strong>、<strong>接收到 的数据</strong>等。存储和处理这些信息的结构称为<strong>套接字（Socket）</strong>。图1-7 展示了套接字包含的内容，每个Socket都包含网络连接中一端的信 息。每个客户端需要一个Socket结构，服务端则需要<strong>N+1</strong>个Socket结 构，其中N为客户端的连接数，另外一个是服务端打开监听的套接字。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法创建虚拟机</title>
      <link href="/2023/08/29/wu-fa-chuang-jian-xu-ni-ji/"/>
      <url>/2023/08/29/wu-fa-chuang-jian-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<p> 无法创建新虚拟机: 不具备执行此操作的权限:</p><p>用管理员方式打开VMware</p>]]></content>
      
      
      <categories>
          
          <category> 故障 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限故障 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不具备执行此操作的权限解决办法</title>
      <link href="/2023/08/29/bu-ju-bei-zhi-xing-ci-cao-zuo-de-quan-xian-jie-jue-ban-fa/"/>
      <url>/2023/08/29/bu-ju-bei-zhi-xing-ci-cao-zuo-de-quan-xian-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用VMware搭建linux即CentOS服务器</title>
      <link href="/2023/08/29/ru-he-shi-yong-vmware-da-jian-linux-ji-centos-fu-wu-qi/"/>
      <url>/2023/08/29/ru-he-shi-yong-vmware-da-jian-linux-ji-centos-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p> [在VMware中安装CentOS7（超详细的图文教程）_vm安装centos7_qq_45743985的博客-CSDN博客](<a href="https://blog.csdn.net/qq_45743985/article/details/121152504#:~:text=%E5%9C%A8VMware%E4%B8%AD%E5%AE%89%E8%A3%85CentOS7%EF%BC%88%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B%EF%BC%89">https://blog.csdn.net/qq_45743985/article/details/121152504#:~:text=在VMware中安装CentOS7（超详细的图文教程）</a> 1 1、CentOS7的下载 官网下载地址： Download 。 进入CentOS下载官网，找到64位的CentOS7版本。 ,4、CentOS7的网络配置 因为前面在设置CentOS7的网络适配器的时候，设置是NAT模式。 所以这里有两种方法，一种是自动获取IP，另一种是固定获取IP … 5 5、XShell连接CentOS7 我们实际在启动CentOS之后，通常都不会直接在VMware操作CentOS，而是使用工具，推荐使用Xshell。 )</p><p>按下ctrl+c可以终止</p>]]></content>
      
      
      <categories>
          
          <category> 软件环境安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘录入</title>
      <link href="/2023/08/26/jian-pan-lu-ru/"/>
      <url>/2023/08/26/jian-pan-lu-ru/</url>
      
        <content type="html"><![CDATA[<p> 第一套体系:</p><p>​import java.util.scanner</p><p>​Scanner sc = new Scanner(System.in);</p><p>nextInt();接收整数</p><p>nextDouble(); 接收小数</p><p>next(); 接收字符串</p><p>遇到空格, 制表符 , 回车就会停止接受 . 这些数据后面的数据就不会接受了</p><p>第二套体系</p><p>nextInt();接受字符串</p><p>可以接收空格,制表符,遇到回车才会停止接收数据</p><h4 id="两套体系最好不要混用"><a href="#两套体系最好不要混用" class="headerlink" title="两套体系最好不要混用"></a>两套体系最好不要混用</h4>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java文字小游戏</title>
      <link href="/2023/08/25/java-wen-zi-xiao-you-xi/"/>
      <url>/2023/08/25/java-wen-zi-xiao-you-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cugbwfx<span class="token punctuation">.</span>test2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Role</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Role</span> r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"嘿嘿"</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r2<span class="token punctuation">.</span><span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            r1<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ko了"</span> <span class="token operator">+</span> r2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            r2<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ko了"</span> <span class="token operator">+</span> r1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> blood<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> face<span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> attacks_desc<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。"</span><span class="token punctuation">,</span>            <span class="token string">"%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。"</span><span class="token punctuation">,</span>            <span class="token string">"%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。"</span><span class="token punctuation">,</span>            <span class="token string">"%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> injureds_desc<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"结果%s退了半步，毫发无损"</span><span class="token punctuation">,</span>            <span class="token string">"结果给%s造成一处瘀伤"</span><span class="token punctuation">,</span>            <span class="token string">"结果一击命中，%s痛得弯下腰"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s痛苦地闷哼了一声，显然受了点内伤"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s摇摇晃晃，一跤摔倒在地"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s脸色一下变得惨白，连退了好几步"</span><span class="token punctuation">,</span>            <span class="token string">"结果『轰』的一声，%s口中鲜血狂喷而出"</span><span class="token punctuation">,</span>            <span class="token string">"结果%s一声惨叫，像滩软泥般塌了下去"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> boyfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"风流俊雅"</span><span class="token punctuation">,</span> <span class="token string">"气宇轩昂"</span><span class="token punctuation">,</span> <span class="token string">"相貌英俊"</span><span class="token punctuation">,</span> <span class="token string">"五官端正"</span><span class="token punctuation">,</span> <span class="token string">"相貌平平"</span><span class="token punctuation">,</span> <span class="token string">"一塌糊涂"</span><span class="token punctuation">,</span> <span class="token string">"面目狰狞"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> girlfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"美奂绝伦"</span><span class="token punctuation">,</span> <span class="token string">"沉鱼落雁"</span><span class="token punctuation">,</span> <span class="token string">"婷婷玉立"</span><span class="token punctuation">,</span> <span class="token string">"身材娇好"</span><span class="token punctuation">,</span> <span class="token string">"相貌平平"</span><span class="token punctuation">,</span> <span class="token string">"相貌简陋"</span><span class="token punctuation">,</span> <span class="token string">"惨不忍睹"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> blood<span class="token punctuation">,</span> <span class="token keyword">char</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>        <span class="token function">setFace</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFace</span><span class="token punctuation">(</span><span class="token keyword">char</span> gender<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>gender <span class="token operator">==</span><span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>boyfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> boyfaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>gender <span class="token operator">==</span> <span class="token char">'女'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>girlfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> girlfaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>face <span class="token operator">=</span> <span class="token string">"面目狰狞"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> blood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlood</span><span class="token punctuation">(</span><span class="token keyword">int</span> blood<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法的调用者去攻击参数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>attacks_desc<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token class-name">Kungfu</span> <span class="token operator">=</span> attacks_desc<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//输出攻击效果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Kungfu</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算伤害</span>        <span class="token keyword">int</span> hurt <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> remainBlood <span class="token operator">=</span> role<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> hurt<span class="token punctuation">;</span>        remainBlood <span class="token operator">=</span> remainBlood <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> remainBlood<span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setBlood</span><span class="token punctuation">(</span>remainBlood<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//受伤描述</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remainBlood <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>injureds_desc<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showRoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长相: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>face<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"血量: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>blood<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常有意思的文字游戏,很有成就感.</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文字游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2023/08/25/ce-shi/"/>
      <url>/2023/08/25/ce-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>0823日记</title>
      <link href="/2023/08/23/0823-ri-ji/"/>
      <url>/2023/08/23/0823-ri-ji/</url>
      
        <content type="html"><![CDATA[<p> 好难,一会要java一会c++一会go,我觉得是不是要先入行再想着转岗呢,现在要现有一个主业,然后再想着进阶或者转岗的事情呢?java工资确实低,但是总有工资高的,具体的怎么看呢,其实我自己是一个天生的喜欢偷懒的人,一旦有一个可以玩的借口了那就如同洪水猛兽一样不可控制,等到不想玩了时间又都过去了,空留懊悔,我觉得我应该一边学着黑马的视频,一边学着左程云的算法,一边进行分布式系统的课程进行学习,</p><p>黑马是底线,左程云是进阶,分布式是进进阶</p><p>同时到学校开始上课以后,我需要面对很多的课业,我得好好学以此来应对读研,读一年,然后一定要继续读博,回来拿编制,业余时间足够多之后去搞副业</p><p>我觉得人越是放松越是失去了目标,失去了动力,我也不知道为什么,网络上盛行着的躺平言论似乎并不适合年轻人,你要是说你到了中年身体所有可能性断绝了再去躺平也就是了,为啥要在有可能的时候去躺平呢,这是很难以理解的,他们那样的想法的出现好像是别人给他们的,他们不得不去实现别人给的目标才去躺平,可是那些目标好像就是我想要的啊,一辈子为了房子奋斗,但是要是两个人还款也没有那么不堪啊,自己一个人买小房子不就行了,我以后一定要读博然后当大学教授,这可是为数不多的阶层跃升的好机会,我已经错过了医生,也不想去严格的军工企业,不能再去错过这个了</p><p>​我突然还有一个想法,就是把目前的目标再去细化,细化到每一个可执行的步骤,最主要的就是可执行,执行不了就一直细化,知道细化到可执行不就行了吗</p>]]></content>
      
      
      <categories>
          
          <category> 心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学导论</title>
      <link href="/2023/08/21/ji-suan-ji-ke-xue-dao-lun/"/>
      <url>/2023/08/21/ji-suan-ji-ke-xue-dao-lun/</url>
      
        <content type="html"><![CDATA[<p>  锁存器</p><p>![](C:\Users\10482\Pictures\Screenshots\屏幕截图 2023-08-21 213555.png)</p><p>八进位器</p><p>![](C:\Users\10482\Pictures\Screenshots\屏幕截图 2023-08-21 205510.png)</p><p>cpu</p><p>一个寄存器追踪程序运行到哪了,指令地址寄存器</p><p>一个寄存器用来存当前地址,我们叫它指令地址寄存器</p><p><img src="C:\Users\10482\AppData\Roaming\Typora\typora-user-images\image-20230821222729540.png" alt="image-20230821222729540"></p>]]></content>
      
      
      <categories>
          
          <category> 英文课 </category>
          
          <category> 计算机科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学 </tag>
            
            <tag> 计算机存储设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局部变量和成员变量区别</title>
      <link href="/2023/08/19/ju-bu-bian-liang-he-cheng-yuan-bian-liang-qu-bie/"/>
      <url>/2023/08/19/ju-bu-bian-liang-he-cheng-yuan-bian-liang-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>​</p><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中,方法外</td><td>方法内,方法声明上</td></tr><tr><td>初始化值不同</td><td>有默认初始化值</td><td>没有,使用前需要赋值</td></tr><tr><td>内存位置不同</td><td>堆内存</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>对象创建而存在,对象消失而消失</td><td>随方法调用而存在,随方法运行结束而消失</td></tr><tr><td>作用域</td><td>整个类中有效</td><td>当前方法有效</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 局部变量 </tag>
            
            <tag> 成员变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javane</title>
      <link href="/2023/08/18/java-nei-cun-fen-pei/"/>
      <url>/2023/08/18/java-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<p> java内存分配介绍</p><p>栈:类似子弹夹,先进后出(方法,变量等)</p><p>方法运行时使用的内存,如main方法运行,进入方法栈中执行</p><p>堆:存储对象或组,new来创建的,都存储在堆内存</p><p>方法区: 存储可以运行的class文件</p><h4 id="jdk8以后取消方法区-新增元空间-把原来方法区进行拆分-有点进入元空间-有点进入堆"><a href="#jdk8以后取消方法区-新增元空间-把原来方法区进行拆分-有点进入元空间-有点进入堆" class="headerlink" title="(jdk8以后取消方法区,新增元空间,把原来方法区进行拆分,有点进入元空间,有点进入堆)"></a>(jdk8以后取消方法区,新增元空间,把原来方法区进行拆分,有点进入元空间,有点进入堆)</h4><p>本地方法栈:jvm在使用操作系统功能时使用,和开发无关</p><p>寄存器 : 给cpu使用,和开发无关</p><p>javabean类(实例类)</p><p>main类(测试类)</p><p><strong>封装:对象代表什么就得封装对应的数据,并提供数据对应的行为</strong></p><h2 id="一个对象的创建过程"><a href="#一个对象的创建过程" class="headerlink" title="一个对象的创建过程"></a>一个对象的创建过程</h2><p>1.加载class文件</p><p>2.申请局部变量</p><p>3.开辟堆空间</p><p>4.默认初始化</p><p>5.显示初始化</p><p>6.构造方法初始化</p><p>7.将堆内存中的地址值赋值给左边的局部变量</p><h1 id="this作用"><a href="#this作用" class="headerlink" title="this作用"></a>this作用</h1><p>区分局部变量和成员变量</p><p>this本质是方法调用者的地址值</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准javabean类</title>
      <link href="/2023/08/18/biao-zhun-javabean-lei/"/>
      <url>/2023/08/18/biao-zhun-javabean-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="标准javabean"><a href="#标准javabean" class="headerlink" title="标准javabean"></a>标准javabean</h1><p>1.类名见名知意</p><p>2.成员变量使用private修饰</p><p>3.至少使用两个构造方法</p><p>​1)无参构造</p><p>​2)带全部参数的构造</p><p>4.成员方法</p><p>​提供每一个成员变量对应的setXxx() / getXxx()</p><p>​如果有其它行为也需要写上</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaBean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法</title>
      <link href="/2023/08/18/gou-zao-fang-fa/"/>
      <url>/2023/08/18/gou-zao-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="构造方法作用"><a href="#构造方法作用" class="headerlink" title="构造方法作用:"></a>构造方法作用:</h4><p>​创建对象时,虚拟机自动调用,给成员变量进行初始化</p><h4 id="构造方法有几种-各自作用是什么"><a href="#构造方法有几种-各自作用是什么" class="headerlink" title="构造方法有几种?各自作用是什么?"></a>构造方法有几种?各自作用是什么?</h4><p>无参构造: 初始化对象成员变量均采用默认值</p><p>有参构造: 初始化对象时,同时可为对象赋值</p><h4 id="构造方法有哪些注意事项"><a href="#构造方法有哪些注意事项" class="headerlink" title="构造方法有哪些注意事项?"></a>构造方法有哪些注意事项?</h4><p>任何类定义出来默认自带无参数构造器,写不写都有</p><p>一旦定义了有参数构造器,无参构造器就没有了,此时就需要自己写无参数构造器了</p><p>建议在任何时候都写上空参和带全部参数的构造方法</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 构造方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或运算</title>
      <link href="/2023/08/15/yi-huo-yun-suan/"/>
      <url>/2023/08/15/yi-huo-yun-suan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">0^N = NN ^ N = 0交换律结合律<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="用异或的方式交换两个数"><a href="#用异或的方式交换两个数" class="headerlink" title="用异或的方式交换两个数"></a>用异或的方式交换两个数</h1><p>a[i] = a[i] * a[j];</p><p>a[j] = a[i] ^ a[j];</p><p>a[i] = a[i] ^ a[j];</p><h1 id="一组数-其余数有偶数次-只有一个数是有奇数次-的-求出这个数"><a href="#一组数-其余数有偶数次-只有一个数是有奇数次-的-求出这个数" class="headerlink" title="一组数,其余数有偶数次,只有一个数是有奇数次 的,求出这个数"></a>一组数,其余数有偶数次,只有一个数是有奇数次 的,求出这个数</h1><p>异或运算循环</p><h1 id="怎么把一个int类型的数提取出最右侧的1来"><a href="#怎么把一个int类型的数提取出最右侧的1来" class="headerlink" title="怎么把一个int类型的数提取出最右侧的1来"></a>怎么把一个int类型的数提取出最右侧的1来</h1><p>a&amp;((~a)+1)即a&amp;(-a)</p><h1 id="一个数组中有两种数出现了奇数次-其他数出现了偶数次-求出这两种数"><a href="#一个数组中有两种数出现了奇数次-其他数出现了偶数次-求出这两种数" class="headerlink" title="一个数组中有两种数出现了奇数次,其他数出现了偶数次,求出这两种数"></a>一个数组中有两种数出现了奇数次,其他数出现了偶数次,求出这两种数</h1><p>先循环,全部异或一遍,求出最后的数相当于奇数次 的两个数异或运算</p><p>之后得出一个数eor,求这个数eor二进制位上最右边为1的数a(见上问题)</p><p> 用一个数在数组中遍历,如果这个数与a与运算不为0,把数组的这个数与eor’进行异或运算</p><p>一遍遍历之后我们就得到了其中一个奇数</p><p>把这个奇数与eor进行位运算就得到了另一个奇数,很巧妙</p><h1 id="一个数组中有一种数出现k次-其他数都出现了M次-M-1-K"><a href="#一个数组中有一种数出现k次-其他数都出现了M次-M-1-K" class="headerlink" title="一个数组中有一种数出现k次,其他数都出现了M次,M>1,K<M,找到,出现了k次的数,要求:额外空间复杂度O(1),时间复杂度O(N)"></a>一个数组中有一种数出现k次,其他数都出现了M次,M&gt;1,K&lt;M,找到,出现了k次的数,要求:额外空间复杂度O(1),时间复杂度O(N)</h1><p>代码实现?</p>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 异或 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java语言自带排序</title>
      <link href="/2023/08/15/java-yu-yan-zi-dai-pai-xu/"/>
      <url>/2023/08/15/java-yu-yan-zi-dai-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>Arrays.sort(int[] a)<br>这种形式是对一个数组的所有元素进行排序，并且是按从小到大的顺序。</p><p>举例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>0 1 2 3 4 5 6 7 8 9</p><p>Arrays.sort(int[] a, int fromIndex, int toIndex)<br>这种形式是 对数组部分排序，也就是对数组a的下标从fromIndex到toIndex-1的元素排序，注意：下标为toIndex的元素不参与排序哦！</p><p>举例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找及对数器的使用</title>
      <link href="/2023/08/14/er-fen-cha-zhao-ji-dui-shu-qi-de-shi-yong/"/>
      <url>/2023/08/14/er-fen-cha-zhao-ji-dui-shu-qi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找及对数器检验"><a href="#二分查找及对数器检验" class="headerlink" title="二分查找及对数器检验"></a>二分查找及对数器检验</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Search</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样可以保证数组中的元素有正有负，且不超过maxValue。</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> testTimes <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxValue <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">isExisted</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>success <span class="token operator">?</span> <span class="token string">"Nice"</span> <span class="token operator">:</span> <span class="token string">"Fucking fucked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExisted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*这段代码中，maxValue表示数组元素的最大绝对值，也就是说，数组中的元素的范围是-maxValue到maxValue之间。Math.random()方法会返回一个0到1之间的随机小数，所以(maxValue + 1) * Math.random()会返回一个0到maxValue + 1之间的随机小数。如果我们直接把这个小数转换成整数，那么我们得到的整数的范围是0到maxValue之间，而不是0到maxValue + 1之间。这样就会导致数组中的元素不能达到maxValue + 1这个值。为了让数组中的元素能够达到maxValue + 1这个值，我们需要在转换成整数之前，对这个小数加上0.5。这样，当这个小数大于或等于maxValue + 0.5时，转换成整数后就会变成maxValue + 1。然而，如果我们直接在(maxValue + 1) * Math.random()后面加上0.5，那么我们得到的小数的范围就会变成0.5到maxValue + 1.5之间。这样就会导致数组中的元素可能超过maxValue + 1这个值。为了避免这种情况，我们需要在(maxValue + 1) * Math.random()前面加上一个负号，然后再减去一个负号。这样，我们得到的小数的范围就会变成-maxValue - 1.5到-0.5之间。转换成整数后，就会变成-maxValue - 1到0之间。最后，我们再减去另一个(maxValue + 1) * Math.random()转换成整数后的值，就可以得到-maxValue - 1到maxValue + 1之间的随机整数了。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 对数器 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 对数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序及对数器的使用</title>
      <link href="/2023/08/14/pai-xu-ji-dui-shu-qi-de-shi-yong/"/>
      <url>/2023/08/14/pai-xu-ji-dui-shu-qi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="选择-冒泡-排序算法"><a href="#选择-冒泡-排序算法" class="headerlink" title="选择,冒泡,排序算法"></a>选择,冒泡,排序算法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cugbwfx<span class="token punctuation">.</span>javaMethod</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_SelectionSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArry</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>end <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span>end<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> newIndex <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>newIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>newIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                newIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> end <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> end<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> second<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//先想边界条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minValueIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/*if(arr[j]&lt;arr[min]){                    min = j;                }*/</span>                minValueIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>minValueIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minValueIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minValueIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArry</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对数器的使用-以检验排序算法为例"><a href="#对数器的使用-以检验排序算法为例" class="headerlink" title="对数器的使用,以检验排序算法为例"></a>对数器的使用,以检验排序算法为例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">randomLenRandomValue</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序算法有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 初学者 对数器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单排序 对数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同类型数据转二进制输出java</title>
      <link href="/2023/08/14/bu-tong-lei-xing-shu-ju-zhuan-er-jin-zhi-shu-chu-java/"/>
      <url>/2023/08/14/bu-tong-lei-xing-shu-ju-zhuan-er-jin-zhi-shu-chu-java/</url>
      
        <content type="html"><![CDATA[<h1 id="不同型数据转二进制输出"><a href="#不同型数据转二进制输出" class="headerlink" title="不同型数据转二进制输出"></a>不同型数据转二进制输出</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//将一个数以二进制形式输出</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num  <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制输出 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> java语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法及常数处理小技巧</title>
      <link href="/2023/08/14/er-fen-fa-ji-chang-shu-chu-li-xiao-ji-qiao/"/>
      <url>/2023/08/14/er-fen-fa-ji-chang-shu-chu-li-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="常数处理技巧-位运算"><a href="#常数处理技巧-位运算" class="headerlink" title="常数处理技巧(位运算)"></a>常数处理技巧(位运算)</h1><h5 id="R-L-2如果遇到19亿-20亿这样的数-会溢出"><a href="#R-L-2如果遇到19亿-20亿这样的数-会溢出" class="headerlink" title="(R+L)/2如果遇到19亿,20亿这样的数,会溢出"></a>(R+L)/2如果遇到19亿,20亿这样的数,会溢出</h5><p>所以用<strong>L+(R-L)/2</strong> 来防止溢出</p><p>而**(R-L)/2<strong>可以写为</strong>(R-L)&gt;&gt;1** </p><img src="C:\Users\10482\MyBlog\source\_posts\photo\壁纸.jpg" alt="壁纸" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 初学者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
            <tag> 位运算处理(规避边界溢出) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对数器</title>
      <link href="/2023/08/14/dui-shu-qi/"/>
      <url>/2023/08/14/dui-shu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="生成随机数组"><a href="#生成随机数组" class="headerlink" title="生成随机数组"></a>生成随机数组</h1><h3 id="生成随机长度和随机值两个步骤"><a href="#生成随机长度和随机值两个步骤" class="headerlink" title="生成随机长度和随机值两个步骤"></a>生成随机长度和随机值两个步骤</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize <span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="随机数种子-Math-random"><a href="#随机数种子-Math-random" class="headerlink" title="随机数种子: Math.random()"></a>随机数种子: Math.random()</h5>]]></content>
      
      
      <categories>
          
          <category> 初学者 对数器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对数器 检验 随机数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从这个链接里面的博客学来的,保存一下链接防止以后找不着</title>
      <link href="/2023/08/13/cong-zhe-ge-lian-jie-li-mian-de-bo-ke-xue-lai-de-bao-cun-yi-xia-lian-jie-fang-zhi-yi-hou-zhao-bu-zhao/"/>
      <url>/2023/08/13/cong-zhe-ge-lian-jie-li-mian-de-bo-ke-xue-lai-de-bao-cun-yi-xia-lian-jie-fang-zhi-yi-hou-zhao-bu-zhao/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_58608526/article/details/124652412?spm=1001.2014.3001.5506">Hexo+Github博客搭建教程_hexo github_Cisyam-Leo的博客-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -&#39;博客搭建&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newdraft</title>
      <link href="/2023/08/13/newdraft/"/>
      <url>/2023/08/13/newdraft/</url>
      
        <content type="html"><![CDATA[<p> 这是一个草稿测试文章</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/08/13/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2023/08/13/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>1.2.1 网站<br>参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</p><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><p>1.2.2 网址<br>参数描述url网址root网站根目录 permalink文章的永久链接格式permalink_defaults永久链接中各部分的默认值</p><p>在这里，你需要把url改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是<a href="http://yoursite.com/2022/05/08/temp%E3%80%82">http://yoursite.com/2022/05/08/temp。</a></p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。</p><p>参数结果:year/:month/:day/:title/2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo/bar/hello-world</p><p>再往下翻，中间这些都默认就好了。</p><p>theme: landscap</p><p>theme就是选择什么主题，也就是在themes这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在themes文件夹下，再修改这个主题参数就可以了。</p><p>1.2.3 Front-matter<br>Front-matter 是md文件最上方以 —分隔的区域，用于指定个别文件的变量，举例来说：</p><p>title: Hexo+Github博客搭建记录<br>date: 2022-05-08 15:15:44</p><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数描述layout布局title标题date建立日期updated更新日期comments开启文章的评论功能tags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址</p><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说Foo，Bar不等于Bar，Foo；而标签没有顺序和层次。</p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo+Github博客搭建记录date: author: img: /medias/banner/7.jpgcoverImg: /medias/banner/7.jpgtop: truecover: truetoc: truepassword: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: truesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2.4 layout（布局）<br>1.2.4.1 post</p><p>当你每一次使用代码</p><p>hexo new XXX</p><p>它其实默认使用的是post这个布局，也就是在source文件夹下的_post里面。</p><p>Hexo有三种默认布局：post、page和draft，它们分别对应不同的路径，而您自定义的其他布局和post相同，都将储存到source/_posts文件夹。</p><p>而new这个命令其实是：</p><p>hexo new [layout] <title>&lt;/p&gt;&lt;p&gt;只不过这个layout默认是post罢了。&lt;/p&gt;&lt;p&gt;2.4.2 page&lt;/p&gt;&lt;p&gt;如果你想另起一页，那么可以使用&lt;/p&gt;&lt;p&gt;hexo new page newpage&lt;/p&gt;&lt;p&gt;系统会自动给你在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，这样你访问的newpage对应的链接就是&lt;a href="http://xxx.xxx/newpage"&gt;http://xxx.xxx/newpage&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2.4.3 draft&lt;/p&gt;&lt;p&gt;draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以&lt;/p&gt;&lt;p&gt;hexo new draft newdraft&lt;/p&gt;&lt;p&gt;这样会在source/_draft中新建一个newdraft.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用&lt;/p&gt;&lt;p&gt;hexo server –draft&lt;/p&gt;&lt;p&gt;在本地端口中开启服务预览。&lt;/p&gt;&lt;p&gt;如果你的草稿文件写完了，想要发表到post中，&lt;/p&gt;&lt;p&gt;hexo publish draft newdraft&lt;/p&gt;&lt;p&gt;就会自动把newdraft.md发送到post中。&lt;/p&gt;</title></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/13/hello-world/"/>
      <url>/2023/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
